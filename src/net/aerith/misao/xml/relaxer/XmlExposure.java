package net.aerith.misao.xml.relaxer;

import org.w3c.dom.*;

/**
 * <b>XmlExposure</b> is generated by Relaxer based on pixy.rlx.
 * This class is derived from:
 * 
 * <!-- for programmer
 * <elementRule role="exposure" type="float"/>
 * 
 * <tag name="exposure">
 *   <attribute name="unit" required="true" type="string"/>
 * </tag>
 * -->
 * <!-- for javadoc -->
 * <pre> &lt;elementRule role="exposure" type="float"/&gt;
 * &lt;tag name="exposure"&gt;
 *   &lt;attribute name="unit" required="true" type="string"/&gt;
 * &lt;/tag&gt;
 * </pre>
 *
 * @version pixy.rlx (Tue Nov 23 20:34:01 JST 2004)
 * @author  Relaxer 0.10.1 (by ASAMI@Yokohama)
 */
public class XmlExposure extends net.aerith.misao.xml.IONode implements java.io.Serializable, IRNode {
    private float content;
    private String unit;
    private IRNode parentRNode;
    private RContext rContext;

    /**
     * Creates a <code>XmlExposure</code>.
     *
     */
    public XmlExposure() {
    }

    /**
     * Creates a <code>XmlExposure</code> by the Stack <code>stack</code>
     * that contains Elements.
     * This constructor is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     */
    public XmlExposure(RStack stack) {
        setup(stack);
    }

    /**
     * Creates a <code>XmlExposure</code> by the Document <code>doc</code>.
     *
     * @param doc
     */
    public XmlExposure(Document doc) {
        setup(doc.getDocumentElement());
    }

    /**
     * Creates a <code>XmlExposure</code> by the Element <code>element</code>.
     *
     * @param element
     */
    public XmlExposure(Element element) {
        setup(element);
    }

    /**
     * Initializes the <code>XmlExposure</code> by the Document <code>doc</code>.
     *
     * @param doc
     */
    public void setup(Document doc) {
        setup(doc.getDocumentElement());
    }

    /**
     * Initializes the <code>XmlExposure</code> by the Element <code>element</code>.
     *
     * @param element
     */
    public void setup(Element element) {
        init(element);
    }

    /**
     * Initializes the <code>XmlExposure</code> by the Stack <code>stack</code>
     * that contains Elements.
     * This constructor is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     */
    public void setup(RStack stack) {
        setup(stack.popElement());
    }

    /**
     * @param element
     */
    private void init(Element element) {
        IPixyFactory factory = PixyFactory.getFactory();
        RStack stack = new RStack(element);
        content = URelaxer.getElementPropertyAsFloat(element);
        unit = URelaxer.getAttributePropertyAsString(element, "unit");
    }

    /**
     * Creates a DOM representation of the object.
     * Result is appended to the Node <code>parent</code>.
     *
     * @param parent
     */
    public void makeElement(Node parent) {
        Document doc;
        if (parent instanceof Document) {
            doc = (Document)parent;
        } else {
            doc = parent.getOwnerDocument();
        }
        Element element = doc.createElement("exposure");
        URelaxer.setElementPropertyByFloat(element, content);
        int size;
        URelaxer.setAttributePropertyByString(element, "unit", unit);
        parent.appendChild(element);
    }

    /**
     * Gets the float property <b>content</b>.
     *
     * @return float
     */
    public final float getContent() {
        return (content);
    }

    /**
     * Sets the float property <b>content</b>.
     *
     * @param content
     */
    public final void setContent(float content) {
        this.content = content;
    }

    /**
     * Gets the String property <b>unit</b>.
     *
     * @return String
     */
    public final String getUnit() {
        return (unit);
    }

    /**
     * Sets the String property <b>unit</b>.
     *
     * @param unit
     */
    public final void setUnit(String unit) {
        this.unit = unit;
    }

    /**
     * Gets the IRNode property <b>parentRNode</b>.
     *
     * @return IRNode
     */
    public final IRNode getParentRNode() {
        return (parentRNode);
    }

    /**
     * Sets the IRNode property <b>parentRNode</b>.
     *
     * @param parentRNode
     */
    public final void setParentRNode(IRNode parentRNode) {
        this.parentRNode = parentRNode;
    }

    /**
     * Gets child RNodes.
     *
     * @return IRNode[]
     */
    public IRNode[] getRNodes() {
        java.util.List classNodes = new java.util.ArrayList();
        IRNode[] nodes = new IRNode[classNodes.size()];
        return ((IRNode[])classNodes.toArray(nodes));
    }

    /**
     * Gets the RContext property <b>rContext</b>.
     *
     * @return RContext
     */
    public final RContext getRContext() {
        return (rContext);
    }

    /**
     * Sets the RContext property <b>rContext</b>.
     *
     * @param rContext
     */
    public final void setRContext(RContext rContext) {
        this.rContext = rContext;
        IRNode[] contextRNodes = getRNodes();
        for (int i = 0;i < contextRNodes.length;i++) {
            contextRNodes[i].setRContext(rContext);
        }
    }

    /**
     * Gets the property "rContext" which is resolved recursively.
     *
     * @return RContext
     */
    public RContext getRContextResolved() {
        if (rContext != null) {
            return (rContext);
        }
        if (parentRNode == null) {
            return (null);
        }
        return (parentRNode.getRContextResolved());
    }

    /**
     * Tests if a Element <code>element</code> is valid
     * for the <code>XmlExposure</code>.
     *
     * @param element
     * @return boolean
     */
    public static boolean isMatch(Element element) {
        String tagName = element.getTagName();
        if (!"exposure".equals(tagName)) {
            return (false);
        }
        RStack target = new RStack(element);
        Element child;
        if (!target.isEmptyElement()) {
            return (false);
        }
        return (true);
    }

    /**
     * Tests if elements contained in a Stack <code>stack</code>
     * is valid for the <code>XmlExposure</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return boolean
     */
    public static boolean isMatch(RStack stack) {
        Element element = stack.peekElement();
        if (element == null) {
            return (false);
        }
        return (isMatch(element));
    }

    /**
     * Tests if elements contained in a Stack <code>stack</code>
     * is valid for the <code>XmlExposure</code>.
     * This method consumes the stack contents during matching operation.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return boolean
     */
    public static boolean isMatchHungry(RStack stack) {
        Element element = stack.peekElement();
        if (element == null) {
            return (false);
        }
        if (isMatch(element)) {
            stack.popElement();
            return (true);
        } else {
            return (false);
        }
    }
}
