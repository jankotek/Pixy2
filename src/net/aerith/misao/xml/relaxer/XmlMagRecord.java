package net.aerith.misao.xml.relaxer;

import org.w3c.dom.*;

/**
 * <b>XmlMagRecord</b> is generated by Relaxer based on pixy.rlx.
 * This class is derived from:
 * 
 * <!-- for programmer
 * <elementRule role="mag-record">
 *   <sequence>
 *     <ref label="date"/>
 *     <ref label="mag"/>
 *     <element name="filter" occurs="?" type="string"/>
 *     <element name="chip" occurs="?" type="string"/>
 *     <element name="catalog" occurs="?" type="string"/>
 *     <element name="observer" type="string"/>
 *     <element name="instruments" occurs="?" type="string"/>
 *     <element name="image-xml-path" occurs="?" type="string"/>
 *     <element name="name" occurs="?" type="string"/>
 *     <ref label="position" occurs="?"/>
 *     <element name="pixels-from-edge" occurs="?" type="int"/>
 *     <ref label="reported" occurs="*"/>
 *     <ref label="unofficial" occurs="?"/>
 *     <ref label="discarded" occurs="?"/>
 *     <ref label="preempted" occurs="?"/>
 *     <ref label="imported" occurs="?"/>
 *     <ref label="blending" occurs="*"/>
 *     <element name="note" occurs="?" type="string"/>
 *   </sequence>
 * </elementRule>
 * 
 * <tag name="mag-record"/>
 * -->
 * <!-- for javadoc -->
 * <pre> &lt;elementRule role="mag-record"&gt;
 *   &lt;sequence&gt;
 *     &lt;ref label="date"/&gt;
 *     &lt;ref label="mag"/&gt;
 *     &lt;element name="filter" occurs="?" type="string"/&gt;
 *     &lt;element name="chip" occurs="?" type="string"/&gt;
 *     &lt;element name="catalog" occurs="?" type="string"/&gt;
 *     &lt;element name="observer" type="string"/&gt;
 *     &lt;element name="instruments" occurs="?" type="string"/&gt;
 *     &lt;element name="image-xml-path" occurs="?" type="string"/&gt;
 *     &lt;element name="name" occurs="?" type="string"/&gt;
 *     &lt;ref label="position" occurs="?"/&gt;
 *     &lt;element name="pixels-from-edge" occurs="?" type="int"/&gt;
 *     &lt;ref label="reported" occurs="*"/&gt;
 *     &lt;ref label="unofficial" occurs="?"/&gt;
 *     &lt;ref label="discarded" occurs="?"/&gt;
 *     &lt;ref label="preempted" occurs="?"/&gt;
 *     &lt;ref label="imported" occurs="?"/&gt;
 *     &lt;ref label="blending" occurs="*"/&gt;
 *     &lt;element name="note" occurs="?" type="string"/&gt;
 *   &lt;/sequence&gt;
 * &lt;/elementRule&gt;
 * &lt;tag name="mag-record"/&gt;
 * </pre>
 *
 * @version pixy.rlx (Tue Nov 23 19:35:40 JST 2004)
 * @author  Relaxer 0.10.1 (by ASAMI@Yokohama)
 */
public class XmlMagRecord extends net.aerith.misao.xml.IONode implements java.io.Serializable, IRNode {
    private String date;
    private XmlMag mag;
    private String filter;
    private String chip;
    private String catalog;
    private String observer;
    private String instruments;
    private String imageXmlPath;
    private String name;
    private XmlPosition position;
    private Integer pixelsFromEdge;
    // List<XmlReported>
    private java.util.List reported = new java.util.ArrayList();
    private XmlUnofficial unofficial;
    private XmlDiscarded discarded;
    private XmlPreempted preempted;
    private XmlImported imported;
    // List<XmlBlending>
    private java.util.List blending = new java.util.ArrayList();
    private String note;
    private IRNode parentRNode;
    private RContext rContext;

    /**
     * Creates a <code>XmlMagRecord</code>.
     *
     */
    public XmlMagRecord() {
    }

    /**
     * Creates a <code>XmlMagRecord</code> by the Stack <code>stack</code>
     * that contains Elements.
     * This constructor is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     */
    public XmlMagRecord(RStack stack) {
        setup(stack);
    }

    /**
     * Creates a <code>XmlMagRecord</code> by the Document <code>doc</code>.
     *
     * @param doc
     */
    public XmlMagRecord(Document doc) {
        setup(doc.getDocumentElement());
    }

    /**
     * Creates a <code>XmlMagRecord</code> by the Element <code>element</code>.
     *
     * @param element
     */
    public XmlMagRecord(Element element) {
        setup(element);
    }

    /**
     * Initializes the <code>XmlMagRecord</code> by the Document <code>doc</code>.
     *
     * @param doc
     */
    public void setup(Document doc) {
        setup(doc.getDocumentElement());
    }

    /**
     * Initializes the <code>XmlMagRecord</code> by the Element <code>element</code>.
     *
     * @param element
     */
    public void setup(Element element) {
        init(element);
    }

    /**
     * Initializes the <code>XmlMagRecord</code> by the Stack <code>stack</code>
     * that contains Elements.
     * This constructor is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     */
    public void setup(RStack stack) {
        setup(stack.popElement());
    }

    /**
     * @param element
     */
    private void init(Element element) {
        IPixyFactory factory = PixyFactory.getFactory();
        RStack stack = new RStack(element);
        date = URelaxer.getElementPropertyAsString(stack.popElement());
        setMag(factory.createXmlMag(stack));
        filter = URelaxer.getElementPropertyAsStringByStack(stack, "filter");
        chip = URelaxer.getElementPropertyAsStringByStack(stack, "chip");
        catalog = URelaxer.getElementPropertyAsStringByStack(stack, "catalog");
        observer = URelaxer.getElementPropertyAsString(stack.popElement());
        instruments = URelaxer.getElementPropertyAsStringByStack(stack, "instruments");
        imageXmlPath = URelaxer.getElementPropertyAsStringByStack(stack, "image-xml-path");
        name = URelaxer.getElementPropertyAsStringByStack(stack, "name");
        if (XmlPosition.isMatch(stack)) {
            setPosition(factory.createXmlPosition(stack));
        }
        pixelsFromEdge = URelaxer.getElementPropertyAsIntByStack(stack, "pixels-from-edge");
        reported.clear();
        while (!stack.isEmptyElement()) {
            if (XmlReported.isMatch(stack)) {
                addReported(factory.createXmlReported(stack));
            } else {
                break;
            }
        }
        if (XmlUnofficial.isMatch(stack)) {
            setUnofficial(factory.createXmlUnofficial(stack));
        }
        if (XmlDiscarded.isMatch(stack)) {
            setDiscarded(factory.createXmlDiscarded(stack));
        }
        if (XmlPreempted.isMatch(stack)) {
            setPreempted(factory.createXmlPreempted(stack));
        }
        if (XmlImported.isMatch(stack)) {
            setImported(factory.createXmlImported(stack));
        }
        blending.clear();
        while (!stack.isEmptyElement()) {
            if (XmlBlending.isMatch(stack)) {
                addBlending(factory.createXmlBlending(stack));
            } else {
                break;
            }
        }
        note = URelaxer.getElementPropertyAsStringByStack(stack, "note");
    }

    /**
     * Creates a DOM representation of the object.
     * Result is appended to the Node <code>parent</code>.
     *
     * @param parent
     */
    public void makeElement(Node parent) {
        Document doc;
        if (parent instanceof Document) {
            doc = (Document)parent;
        } else {
            doc = parent.getOwnerDocument();
        }
        Element element = doc.createElement("mag-record");
        int size;
        URelaxer.setElementPropertyByString(element, "date", date);
        mag.makeElement(element);
        if (filter != null) {
            URelaxer.setElementPropertyByString(element, "filter", filter);
        }
        if (chip != null) {
            URelaxer.setElementPropertyByString(element, "chip", chip);
        }
        if (catalog != null) {
            URelaxer.setElementPropertyByString(element, "catalog", catalog);
        }
        URelaxer.setElementPropertyByString(element, "observer", observer);
        if (instruments != null) {
            URelaxer.setElementPropertyByString(element, "instruments", instruments);
        }
        if (imageXmlPath != null) {
            URelaxer.setElementPropertyByString(element, "image-xml-path", imageXmlPath);
        }
        if (name != null) {
            URelaxer.setElementPropertyByString(element, "name", name);
        }
        if (position != null) {
            position.makeElement(element);
        }
        if (pixelsFromEdge != null) {
            URelaxer.setElementPropertyByInt(element, "pixels-from-edge", pixelsFromEdge);
        }
        size = reported.size();
        for (int i = 0;i < size;i++) {
            XmlReported value = (XmlReported)this.reported.get(i);
            value.makeElement(element);
        }
        if (unofficial != null) {
            unofficial.makeElement(element);
        }
        if (discarded != null) {
            discarded.makeElement(element);
        }
        if (preempted != null) {
            preempted.makeElement(element);
        }
        if (imported != null) {
            imported.makeElement(element);
        }
        size = blending.size();
        for (int i = 0;i < size;i++) {
            XmlBlending value = (XmlBlending)this.blending.get(i);
            value.makeElement(element);
        }
        if (note != null) {
            URelaxer.setElementPropertyByString(element, "note", note);
        }
        parent.appendChild(element);
    }

    /**
     * Gets the String property <b>date</b>.
     *
     * @return String
     */
    public final String getDate() {
        return (date);
    }

    /**
     * Sets the String property <b>date</b>.
     *
     * @param date
     */
    public final void setDate(String date) {
        this.date = date;
    }

    /**
     * Gets the XmlMag property <b>mag</b>.
     *
     * @return XmlMag
     */
    public final XmlMag getMag() {
        return (mag);
    }

    /**
     * Sets the XmlMag property <b>mag</b>.
     *
     * @param mag
     */
    public final void setMag(XmlMag mag) {
        this.mag = mag;
        mag.setParentRNode(this);
    }

    /**
     * Gets the String property <b>filter</b>.
     *
     * @return String
     */
    public final String getFilter() {
        return (filter);
    }

    /**
     * Sets the String property <b>filter</b>.
     *
     * @param filter
     */
    public final void setFilter(String filter) {
        this.filter = filter;
    }

    /**
     * Gets the String property <b>chip</b>.
     *
     * @return String
     */
    public final String getChip() {
        return (chip);
    }

    /**
     * Sets the String property <b>chip</b>.
     *
     * @param chip
     */
    public final void setChip(String chip) {
        this.chip = chip;
    }

    /**
     * Gets the String property <b>catalog</b>.
     *
     * @return String
     */
    public final String getCatalog() {
        return (catalog);
    }

    /**
     * Sets the String property <b>catalog</b>.
     *
     * @param catalog
     */
    public final void setCatalog(String catalog) {
        this.catalog = catalog;
    }

    /**
     * Gets the String property <b>observer</b>.
     *
     * @return String
     */
    public final String getObserver() {
        return (observer);
    }

    /**
     * Sets the String property <b>observer</b>.
     *
     * @param observer
     */
    public final void setObserver(String observer) {
        this.observer = observer;
    }

    /**
     * Gets the String property <b>instruments</b>.
     *
     * @return String
     */
    public final String getInstruments() {
        return (instruments);
    }

    /**
     * Sets the String property <b>instruments</b>.
     *
     * @param instruments
     */
    public final void setInstruments(String instruments) {
        this.instruments = instruments;
    }

    /**
     * Gets the String property <b>imageXmlPath</b>.
     *
     * @return String
     */
    public final String getImageXmlPath() {
        return (imageXmlPath);
    }

    /**
     * Sets the String property <b>imageXmlPath</b>.
     *
     * @param imageXmlPath
     */
    public final void setImageXmlPath(String imageXmlPath) {
        this.imageXmlPath = imageXmlPath;
    }

    /**
     * Gets the String property <b>name</b>.
     *
     * @return String
     */
    public final String getName() {
        return (name);
    }

    /**
     * Sets the String property <b>name</b>.
     *
     * @param name
     */
    public final void setName(String name) {
        this.name = name;
    }

    /**
     * Gets the XmlPosition property <b>position</b>.
     *
     * @return XmlPosition
     */
    public final XmlPosition getPosition() {
        return (position);
    }

    /**
     * Sets the XmlPosition property <b>position</b>.
     *
     * @param position
     */
    public final void setPosition(XmlPosition position) {
        this.position = position;
        position.setParentRNode(this);
    }

    /**
     * Gets the Integer property <b>pixelsFromEdge</b>.
     *
     * @return Integer
     */
    public final Integer getPixelsFromEdge() {
        return (pixelsFromEdge);
    }

    /**
     * Sets the Integer property <b>pixelsFromEdge</b>.
     *
     * @param pixelsFromEdge
     */
    public final void setPixelsFromEdge(Integer pixelsFromEdge) {
        this.pixelsFromEdge = pixelsFromEdge;
    }

    /**
     * Gets the XmlReported property <b>reported</b>.
     *
     * @return XmlReported[]
     */
    public final XmlReported[] getReported() {
        IPixyFactory factory = PixyFactory.getFactory();
        XmlReported[] array = factory.createArrayXmlReported(reported.size());
        return ((XmlReported[])reported.toArray(array));
    }

    /**
     * Sets the XmlReported property <b>reported</b>.
     *
     * @param reported
     */
    public final void setReported(XmlReported[] reported) {
        this.reported.clear();
        this.reported.addAll(java.util.Arrays.asList(reported));
        for (int i = 0;i < reported.length;i++) {
            reported[i].setParentRNode(this);
        }
    }

    /**
     * Adds the XmlReported property <b>reported</b>.
     *
     * @param reported
     */
    public final void addReported(XmlReported reported) {
        this.reported.add(reported);
        reported.setParentRNode(this);
    }

    /**
     * Gets the XmlUnofficial property <b>unofficial</b>.
     *
     * @return XmlUnofficial
     */
    public final XmlUnofficial getUnofficial() {
        return (unofficial);
    }

    /**
     * Sets the XmlUnofficial property <b>unofficial</b>.
     *
     * @param unofficial
     */
    public final void setUnofficial(XmlUnofficial unofficial) {
        this.unofficial = unofficial;
		if (unofficial != null)
			unofficial.setParentRNode(this);
    }

    /**
     * Gets the XmlDiscarded property <b>discarded</b>.
     *
     * @return XmlDiscarded
     */
    public final XmlDiscarded getDiscarded() {
        return (discarded);
    }

    /**
     * Sets the XmlDiscarded property <b>discarded</b>.
     *
     * @param discarded
     */
    public final void setDiscarded(XmlDiscarded discarded) {
        this.discarded = discarded;
		if (discarded != null)
			discarded.setParentRNode(this);
    }

    /**
     * Gets the XmlPreempted property <b>preempted</b>.
     *
     * @return XmlPreempted
     */
    public final XmlPreempted getPreempted() {
        return (preempted);
    }

    /**
     * Sets the XmlPreempted property <b>preempted</b>.
     *
     * @param preempted
     */
    public final void setPreempted(XmlPreempted preempted) {
        this.preempted = preempted;
		if (preempted != null)
			preempted.setParentRNode(this);
    }

    /**
     * Gets the XmlImported property <b>imported</b>.
     *
     * @return XmlImported
     */
    public final XmlImported getImported() {
        return (imported);
    }

    /**
     * Sets the XmlImported property <b>imported</b>.
     *
     * @param imported
     */
    public final void setImported(XmlImported imported) {
        this.imported = imported;
		if (imported != null)
			imported.setParentRNode(this);
    }

    /**
     * Gets the XmlBlending property <b>blending</b>.
     *
     * @return XmlBlending[]
     */
    public final XmlBlending[] getBlending() {
        IPixyFactory factory = PixyFactory.getFactory();
        XmlBlending[] array = factory.createArrayXmlBlending(blending.size());
        return ((XmlBlending[])blending.toArray(array));
    }

    /**
     * Sets the XmlBlending property <b>blending</b>.
     *
     * @param blending
     */
    public final void setBlending(XmlBlending[] blending) {
        this.blending.clear();
        this.blending.addAll(java.util.Arrays.asList(blending));
        for (int i = 0;i < blending.length;i++) {
            blending[i].setParentRNode(this);
        }
    }

    /**
     * Adds the XmlBlending property <b>blending</b>.
     *
     * @param blending
     */
    public final void addBlending(XmlBlending blending) {
        this.blending.add(blending);
        blending.setParentRNode(this);
    }

    /**
     * Gets the String property <b>note</b>.
     *
     * @return String
     */
    public final String getNote() {
        return (note);
    }

    /**
     * Sets the String property <b>note</b>.
     *
     * @param note
     */
    public final void setNote(String note) {
        this.note = note;
    }

    /**
     * Gets the IRNode property <b>parentRNode</b>.
     *
     * @return IRNode
     */
    public final IRNode getParentRNode() {
        return (parentRNode);
    }

    /**
     * Sets the IRNode property <b>parentRNode</b>.
     *
     * @param parentRNode
     */
    public final void setParentRNode(IRNode parentRNode) {
        this.parentRNode = parentRNode;
    }

    /**
     * Gets child RNodes.
     *
     * @return IRNode[]
     */
    public IRNode[] getRNodes() {
        java.util.List classNodes = new java.util.ArrayList();
        classNodes.add(mag);
        if (position != null) {
            classNodes.add(position);
        }
        classNodes.addAll(reported);
        if (unofficial != null) {
            classNodes.add(unofficial);
        }
        if (discarded != null) {
            classNodes.add(discarded);
        }
        if (preempted != null) {
            classNodes.add(preempted);
        }
        if (imported != null) {
            classNodes.add(imported);
        }
        classNodes.addAll(blending);
        IRNode[] nodes = new IRNode[classNodes.size()];
        return ((IRNode[])classNodes.toArray(nodes));
    }

    /**
     * Gets the RContext property <b>rContext</b>.
     *
     * @return RContext
     */
    public final RContext getRContext() {
        return (rContext);
    }

    /**
     * Sets the RContext property <b>rContext</b>.
     *
     * @param rContext
     */
    public final void setRContext(RContext rContext) {
        this.rContext = rContext;
        IRNode[] contextRNodes = getRNodes();
        for (int i = 0;i < contextRNodes.length;i++) {
            contextRNodes[i].setRContext(rContext);
        }
    }

    /**
     * Gets the property "rContext" which is resolved recursively.
     *
     * @return RContext
     */
    public RContext getRContextResolved() {
        if (rContext != null) {
            return (rContext);
        }
        if (parentRNode == null) {
            return (null);
        }
        return (parentRNode.getRContextResolved());
    }

    /**
     * Tests if a Element <code>element</code> is valid
     * for the <code>XmlMagRecord</code>.
     *
     * @param element
     * @return boolean
     */
    public static boolean isMatch(Element element) {
        String tagName = element.getTagName();
        if (!"mag-record".equals(tagName)) {
            return (false);
        }
        RStack target = new RStack(element);
        Element child;
        child = target.popElement();
        if (child == null) {
            return (false);
        }
        if (!"date".equals(child.getTagName())) {
            return (false);
        }
        if (!XmlMag.isMatchHungry(target)) {
            return (false);
        }
        child = target.peekElement();
        if (child != null) {
            if ("filter".equals(child.getTagName())) {
                target.popElement();
            }
        }
        child = target.peekElement();
        if (child != null) {
            if ("chip".equals(child.getTagName())) {
                target.popElement();
            }
        }
        child = target.peekElement();
        if (child != null) {
            if ("catalog".equals(child.getTagName())) {
                target.popElement();
            }
        }
        child = target.popElement();
        if (child == null) {
            return (false);
        }
        if (!"observer".equals(child.getTagName())) {
            return (false);
        }
        child = target.peekElement();
        if (child != null) {
            if ("instruments".equals(child.getTagName())) {
                target.popElement();
            }
        }
        child = target.peekElement();
        if (child != null) {
            if ("image-xml-path".equals(child.getTagName())) {
                target.popElement();
            }
        }
        child = target.peekElement();
        if (child != null) {
            if ("name".equals(child.getTagName())) {
                target.popElement();
            }
        }
        if (XmlPosition.isMatchHungry(target)) {
        }
        child = target.peekElement();
        if (child != null) {
            if ("pixels-from-edge".equals(child.getTagName())) {
                target.popElement();
            }
        }
        while (!target.isEmptyElement()) {
            if (!XmlReported.isMatchHungry(target)) {
                break;
            }
        }
        if (XmlUnofficial.isMatchHungry(target)) {
        }
        if (XmlDiscarded.isMatchHungry(target)) {
        }
        if (XmlPreempted.isMatchHungry(target)) {
        }
        if (XmlImported.isMatchHungry(target)) {
        }
        while (!target.isEmptyElement()) {
            if (!XmlBlending.isMatchHungry(target)) {
                break;
            }
        }
        child = target.peekElement();
        if (child != null) {
            if ("note".equals(child.getTagName())) {
                target.popElement();
            }
        }
        if (!target.isEmptyElement()) {
            return (false);
        }
        return (true);
    }

    /**
     * Tests if elements contained in a Stack <code>stack</code>
     * is valid for the <code>XmlMagRecord</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return boolean
     */
    public static boolean isMatch(RStack stack) {
        Element element = stack.peekElement();
        if (element == null) {
            return (false);
        }
        return (isMatch(element));
    }

    /**
     * Tests if elements contained in a Stack <code>stack</code>
     * is valid for the <code>XmlMagRecord</code>.
     * This method consumes the stack contents during matching operation.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return boolean
     */
    public static boolean isMatchHungry(RStack stack) {
        Element element = stack.peekElement();
        if (element == null) {
            return (false);
        }
        if (isMatch(element)) {
            stack.popElement();
            return (true);
        } else {
            return (false);
        }
    }
}
