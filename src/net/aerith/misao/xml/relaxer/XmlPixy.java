package net.aerith.misao.xml.relaxer;

import org.w3c.dom.*;

/**
 * <b>XmlPixy</b> is generated by Relaxer based on pixy.rlx.
 * This class is derived from:
 * 
 * <!-- for programmer
 * <elementRule role="pixy">
 *   <sequence>
 *     <ref label="report"/>
 *     <ref label="batch"/>
 *     <ref label="information-holder"/>
 *     <ref label="record-holder"/>
 *     <ref label="mag-record-holder"/>
 *     <ref label="position-record-holder"/>
 *     <ref label="variability-holder"/>
 *   </sequence>
 * </elementRule>
 * 
 * <tag name="pixy"/>
 * -->
 * <!-- for javadoc -->
 * <pre> &lt;elementRule role="pixy"&gt;
 *   &lt;sequence&gt;
 *     &lt;ref label="report"/&gt;
 *     &lt;ref label="batch"/&gt;
 *     &lt;ref label="information-holder"/&gt;
 *     &lt;ref label="record-holder"/&gt;
 *     &lt;ref label="mag-record-holder"/&gt;
 *     &lt;ref label="position-record-holder"/&gt;
 *     &lt;ref label="variability-holder"/&gt;
 *   &lt;/sequence&gt;
 * &lt;/elementRule&gt;
 * &lt;tag name="pixy"/&gt;
 * </pre>
 *
 * @version pixy.rlx (Tue Nov 23 20:34:01 JST 2004)
 * @author  Relaxer 0.10.1 (by ASAMI@Yokohama)
 */
public class XmlPixy extends net.aerith.misao.xml.IONode implements java.io.Serializable, IRNode {
    private XmlReport report;
    private XmlBatch batch;
    private XmlInformationHolder informationHolder;
    private XmlRecordHolder recordHolder;
    private XmlMagRecordHolder magRecordHolder;
    private XmlPositionRecordHolder positionRecordHolder;
    private XmlVariabilityHolder variabilityHolder;
    private IRNode parentRNode;
    private RContext rContext;

    /**
     * Creates a <code>XmlPixy</code>.
     *
     */
    public XmlPixy() {
    }

    /**
     * Creates a <code>XmlPixy</code> by the Stack <code>stack</code>
     * that contains Elements.
     * This constructor is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     */
    public XmlPixy(RStack stack) {
        setup(stack);
    }

    /**
     * Creates a <code>XmlPixy</code> by the Document <code>doc</code>.
     *
     * @param doc
     */
    public XmlPixy(Document doc) {
        setup(doc.getDocumentElement());
    }

    /**
     * Creates a <code>XmlPixy</code> by the Element <code>element</code>.
     *
     * @param element
     */
    public XmlPixy(Element element) {
        setup(element);
    }

    /**
     * Initializes the <code>XmlPixy</code> by the Document <code>doc</code>.
     *
     * @param doc
     */
    public void setup(Document doc) {
        setup(doc.getDocumentElement());
    }

    /**
     * Initializes the <code>XmlPixy</code> by the Element <code>element</code>.
     *
     * @param element
     */
    public void setup(Element element) {
        init(element);
    }

    /**
     * Initializes the <code>XmlPixy</code> by the Stack <code>stack</code>
     * that contains Elements.
     * This constructor is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     */
    public void setup(RStack stack) {
        setup(stack.popElement());
    }

    /**
     * @param element
     */
    private void init(Element element) {
        IPixyFactory factory = PixyFactory.getFactory();
        RStack stack = new RStack(element);
        setReport(factory.createXmlReport(stack));
        setBatch(factory.createXmlBatch(stack));
        setInformationHolder(factory.createXmlInformationHolder(stack));
        setRecordHolder(factory.createXmlRecordHolder(stack));
        setMagRecordHolder(factory.createXmlMagRecordHolder(stack));
        setPositionRecordHolder(factory.createXmlPositionRecordHolder(stack));
        setVariabilityHolder(factory.createXmlVariabilityHolder(stack));
    }

    /**
     * Creates a DOM representation of the object.
     * Result is appended to the Node <code>parent</code>.
     *
     * @param parent
     */
    public void makeElement(Node parent) {
        Document doc;
        if (parent instanceof Document) {
            doc = (Document)parent;
        } else {
            doc = parent.getOwnerDocument();
        }
        Element element = doc.createElement("pixy");
        int size;
        report.makeElement(element);
        batch.makeElement(element);
        informationHolder.makeElement(element);
        recordHolder.makeElement(element);
        magRecordHolder.makeElement(element);
        positionRecordHolder.makeElement(element);
        variabilityHolder.makeElement(element);
        parent.appendChild(element);
    }

    /**
     * Gets the XmlReport property <b>report</b>.
     *
     * @return XmlReport
     */
    public final XmlReport getReport() {
        return (report);
    }

    /**
     * Sets the XmlReport property <b>report</b>.
     *
     * @param report
     */
    public final void setReport(XmlReport report) {
        this.report = report;
        report.setParentRNode(this);
    }

    /**
     * Gets the XmlBatch property <b>batch</b>.
     *
     * @return XmlBatch
     */
    public final XmlBatch getBatch() {
        return (batch);
    }

    /**
     * Sets the XmlBatch property <b>batch</b>.
     *
     * @param batch
     */
    public final void setBatch(XmlBatch batch) {
        this.batch = batch;
        batch.setParentRNode(this);
    }

    /**
     * Gets the XmlInformationHolder property <b>informationHolder</b>.
     *
     * @return XmlInformationHolder
     */
    public final XmlInformationHolder getInformationHolder() {
        return (informationHolder);
    }

    /**
     * Sets the XmlInformationHolder property <b>informationHolder</b>.
     *
     * @param informationHolder
     */
    public final void setInformationHolder(XmlInformationHolder informationHolder) {
        this.informationHolder = informationHolder;
        informationHolder.setParentRNode(this);
    }

    /**
     * Gets the XmlRecordHolder property <b>recordHolder</b>.
     *
     * @return XmlRecordHolder
     */
    public final XmlRecordHolder getRecordHolder() {
        return (recordHolder);
    }

    /**
     * Sets the XmlRecordHolder property <b>recordHolder</b>.
     *
     * @param recordHolder
     */
    public final void setRecordHolder(XmlRecordHolder recordHolder) {
        this.recordHolder = recordHolder;
        recordHolder.setParentRNode(this);
    }

    /**
     * Gets the XmlMagRecordHolder property <b>magRecordHolder</b>.
     *
     * @return XmlMagRecordHolder
     */
    public final XmlMagRecordHolder getMagRecordHolder() {
        return (magRecordHolder);
    }

    /**
     * Sets the XmlMagRecordHolder property <b>magRecordHolder</b>.
     *
     * @param magRecordHolder
     */
    public final void setMagRecordHolder(XmlMagRecordHolder magRecordHolder) {
        this.magRecordHolder = magRecordHolder;
        magRecordHolder.setParentRNode(this);
    }

    /**
     * Gets the XmlPositionRecordHolder property <b>positionRecordHolder</b>.
     *
     * @return XmlPositionRecordHolder
     */
    public final XmlPositionRecordHolder getPositionRecordHolder() {
        return (positionRecordHolder);
    }

    /**
     * Sets the XmlPositionRecordHolder property <b>positionRecordHolder</b>.
     *
     * @param positionRecordHolder
     */
    public final void setPositionRecordHolder(XmlPositionRecordHolder positionRecordHolder) {
        this.positionRecordHolder = positionRecordHolder;
        positionRecordHolder.setParentRNode(this);
    }

    /**
     * Gets the XmlVariabilityHolder property <b>variabilityHolder</b>.
     *
     * @return XmlVariabilityHolder
     */
    public final XmlVariabilityHolder getVariabilityHolder() {
        return (variabilityHolder);
    }

    /**
     * Sets the XmlVariabilityHolder property <b>variabilityHolder</b>.
     *
     * @param variabilityHolder
     */
    public final void setVariabilityHolder(XmlVariabilityHolder variabilityHolder) {
        this.variabilityHolder = variabilityHolder;
        variabilityHolder.setParentRNode(this);
    }

    /**
     * Gets the IRNode property <b>parentRNode</b>.
     *
     * @return IRNode
     */
    public final IRNode getParentRNode() {
        return (parentRNode);
    }

    /**
     * Sets the IRNode property <b>parentRNode</b>.
     *
     * @param parentRNode
     */
    public final void setParentRNode(IRNode parentRNode) {
        this.parentRNode = parentRNode;
    }

    /**
     * Gets child RNodes.
     *
     * @return IRNode[]
     */
    public IRNode[] getRNodes() {
        java.util.List classNodes = new java.util.ArrayList();
        classNodes.add(report);
        classNodes.add(batch);
        classNodes.add(informationHolder);
        classNodes.add(recordHolder);
        classNodes.add(magRecordHolder);
        classNodes.add(positionRecordHolder);
        classNodes.add(variabilityHolder);
        IRNode[] nodes = new IRNode[classNodes.size()];
        return ((IRNode[])classNodes.toArray(nodes));
    }

    /**
     * Gets the RContext property <b>rContext</b>.
     *
     * @return RContext
     */
    public final RContext getRContext() {
        return (rContext);
    }

    /**
     * Sets the RContext property <b>rContext</b>.
     *
     * @param rContext
     */
    public final void setRContext(RContext rContext) {
        this.rContext = rContext;
        IRNode[] contextRNodes = getRNodes();
        for (int i = 0;i < contextRNodes.length;i++) {
            contextRNodes[i].setRContext(rContext);
        }
    }

    /**
     * Gets the property "rContext" which is resolved recursively.
     *
     * @return RContext
     */
    public RContext getRContextResolved() {
        if (rContext != null) {
            return (rContext);
        }
        if (parentRNode == null) {
            return (null);
        }
        return (parentRNode.getRContextResolved());
    }

    /**
     * Tests if a Element <code>element</code> is valid
     * for the <code>XmlPixy</code>.
     *
     * @param element
     * @return boolean
     */
    public static boolean isMatch(Element element) {
        String tagName = element.getTagName();
        if (!"pixy".equals(tagName)) {
            return (false);
        }
        RStack target = new RStack(element);
        Element child;
        if (!XmlReport.isMatchHungry(target)) {
            return (false);
        }
        if (!XmlBatch.isMatchHungry(target)) {
            return (false);
        }
        if (!XmlInformationHolder.isMatchHungry(target)) {
            return (false);
        }
        if (!XmlRecordHolder.isMatchHungry(target)) {
            return (false);
        }
        if (!XmlMagRecordHolder.isMatchHungry(target)) {
            return (false);
        }
        if (!XmlPositionRecordHolder.isMatchHungry(target)) {
            return (false);
        }
        if (!XmlVariabilityHolder.isMatchHungry(target)) {
            return (false);
        }
        if (!target.isEmptyElement()) {
            return (false);
        }
        return (true);
    }

    /**
     * Tests if elements contained in a Stack <code>stack</code>
     * is valid for the <code>XmlPixy</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return boolean
     */
    public static boolean isMatch(RStack stack) {
        Element element = stack.peekElement();
        if (element == null) {
            return (false);
        }
        return (isMatch(element));
    }

    /**
     * Tests if elements contained in a Stack <code>stack</code>
     * is valid for the <code>XmlPixy</code>.
     * This method consumes the stack contents during matching operation.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return boolean
     */
    public static boolean isMatchHungry(RStack stack) {
        Element element = stack.peekElement();
        if (element == null) {
            return (false);
        }
        if (isMatch(element)) {
            stack.popElement();
            return (true);
        } else {
            return (false);
        }
    }
}
