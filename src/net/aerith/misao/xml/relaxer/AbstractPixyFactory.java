package net.aerith.misao.xml.relaxer;

import org.w3c.dom.*;

/**
 * AbstractPixyFactory is generated by Relaxer based on pixy.rlx.
 *
 * @version pixy.rlx (Tue Nov 23 20:34:02 JST 2004)
 * @author  Relaxer 0.10.1 (by ASAMI@Yokohama)
 */
public abstract class AbstractPixyFactory implements IPixyFactory {

    /**
     * Creates a <code>XmlPixy</code> with Context.
     *
     * @return XmlPixy
     */
    public XmlPixy createXmlPixyWithContext() {
        XmlPixy xmlPixy = createXmlPixy();
        xmlPixy.setRContext(createRContext());
        return (xmlPixy);
    }

    /**
     * Creates a <code>XmlReport</code> with Context.
     *
     * @return XmlReport
     */
    public XmlReport createXmlReportWithContext() {
        XmlReport xmlReport = createXmlReport();
        xmlReport.setRContext(createRContext());
        return (xmlReport);
    }

    /**
     * Creates a <code>XmlSystem</code> with Context.
     *
     * @return XmlSystem
     */
    public XmlSystem createXmlSystemWithContext() {
        XmlSystem xmlSystem = createXmlSystem();
        xmlSystem.setRContext(createRContext());
        return (xmlSystem);
    }

    /**
     * Creates a <code>XmlInformation</code> with Context.
     *
     * @return XmlInformation
     */
    public XmlInformation createXmlInformationWithContext() {
        XmlInformation xmlInformation = createXmlInformation();
        xmlInformation.setRContext(createRContext());
        return (xmlInformation);
    }

    /**
     * Creates a <code>XmlImage</code> with Context.
     *
     * @return XmlImage
     */
    public XmlImage createXmlImageWithContext() {
        XmlImage xmlImage = createXmlImage();
        xmlImage.setRContext(createRContext());
        return (xmlImage);
    }

    /**
     * Creates a <code>XmlSize</code> with Context.
     *
     * @return XmlSize
     */
    public XmlSize createXmlSizeWithContext() {
        XmlSize xmlSize = createXmlSize();
        xmlSize.setRContext(createRContext());
        return (xmlSize);
    }

    /**
     * Creates a <code>XmlExposure</code> with Context.
     *
     * @return XmlExposure
     */
    public XmlExposure createXmlExposureWithContext() {
        XmlExposure xmlExposure = createXmlExposure();
        xmlExposure.setRContext(createRContext());
        return (xmlExposure);
    }

    /**
     * Creates a <code>XmlCenter</code> with Context.
     *
     * @return XmlCenter
     */
    public XmlCenter createXmlCenterWithContext() {
        XmlCenter xmlCenter = createXmlCenter();
        xmlCenter.setRContext(createRContext());
        return (xmlCenter);
    }

    /**
     * Creates a <code>XmlFov</code> with Context.
     *
     * @return XmlFov
     */
    public XmlFov createXmlFovWithContext() {
        XmlFov xmlFov = createXmlFov();
        xmlFov.setRContext(createRContext());
        return (xmlFov);
    }

    /**
     * Creates a <code>XmlRotation</code> with Context.
     *
     * @return XmlRotation
     */
    public XmlRotation createXmlRotationWithContext() {
        XmlRotation xmlRotation = createXmlRotation();
        xmlRotation.setRContext(createRContext());
        return (xmlRotation);
    }

    /**
     * Creates a <code>XmlPixelSize</code> with Context.
     *
     * @return XmlPixelSize
     */
    public XmlPixelSize createXmlPixelSizeWithContext() {
        XmlPixelSize xmlPixelSize = createXmlPixelSize();
        xmlPixelSize.setRContext(createRContext());
        return (xmlPixelSize);
    }

    /**
     * Creates a <code>XmlAstrometricError</code> with Context.
     *
     * @return XmlAstrometricError
     */
    public XmlAstrometricError createXmlAstrometricErrorWithContext() {
        XmlAstrometricError xmlAstrometricError = createXmlAstrometricError();
        xmlAstrometricError.setRContext(createRContext());
        return (xmlAstrometricError);
    }

    /**
     * Creates a <code>XmlDistortionField</code> with Context.
     *
     * @return XmlDistortionField
     */
    public XmlDistortionField createXmlDistortionFieldWithContext() {
        XmlDistortionField xmlDistortionField = createXmlDistortionField();
        xmlDistortionField.setRContext(createRContext());
        return (xmlDistortionField);
    }

    /**
     * Creates a <code>XmlAstrometry</code> with Context.
     *
     * @return XmlAstrometry
     */
    public XmlAstrometry createXmlAstrometryWithContext() {
        XmlAstrometry xmlAstrometry = createXmlAstrometry();
        xmlAstrometry.setRContext(createRContext());
        return (xmlAstrometry);
    }

    /**
     * Creates a <code>XmlCatalog</code> with Context.
     *
     * @return XmlCatalog
     */
    public XmlCatalog createXmlCatalogWithContext() {
        XmlCatalog xmlCatalog = createXmlCatalog();
        xmlCatalog.setRContext(createRContext());
        return (xmlCatalog);
    }

    /**
     * Creates a <code>XmlPhotometry</code> with Context.
     *
     * @return XmlPhotometry
     */
    public XmlPhotometry createXmlPhotometryWithContext() {
        XmlPhotometry xmlPhotometry = createXmlPhotometry();
        xmlPhotometry.setRContext(createRContext());
        return (xmlPhotometry);
    }

    /**
     * Creates a <code>XmlReversedImage</code> with Context.
     *
     * @return XmlReversedImage
     */
    public XmlReversedImage createXmlReversedImageWithContext() {
        XmlReversedImage xmlReversedImage = createXmlReversedImage();
        xmlReversedImage.setRContext(createRContext());
        return (xmlReversedImage);
    }

    /**
     * Creates a <code>XmlSbigImage</code> with Context.
     *
     * @return XmlSbigImage
     */
    public XmlSbigImage createXmlSbigImageWithContext() {
        XmlSbigImage xmlSbigImage = createXmlSbigImage();
        xmlSbigImage.setRContext(createRContext());
        return (xmlSbigImage);
    }

    /**
     * Creates a <code>XmlUnofficial</code> with Context.
     *
     * @return XmlUnofficial
     */
    public XmlUnofficial createXmlUnofficialWithContext() {
        XmlUnofficial xmlUnofficial = createXmlUnofficial();
        xmlUnofficial.setRContext(createRContext());
        return (xmlUnofficial);
    }

    /**
     * Creates a <code>XmlStarCount</code> with Context.
     *
     * @return XmlStarCount
     */
    public XmlStarCount createXmlStarCountWithContext() {
        XmlStarCount xmlStarCount = createXmlStarCount();
        xmlStarCount.setRContext(createRContext());
        return (xmlStarCount);
    }

    /**
     * Creates a <code>XmlData</code> with Context.
     *
     * @return XmlData
     */
    public XmlData createXmlDataWithContext() {
        XmlData xmlData = createXmlData();
        xmlData.setRContext(createRContext());
        return (xmlData);
    }

    /**
     * Creates a <code>XmlStar</code> with Context.
     *
     * @return XmlStar
     */
    public XmlStar createXmlStarWithContext() {
        XmlStar xmlStar = createXmlStar();
        xmlStar.setRContext(createRContext());
        return (xmlStar);
    }

    /**
     * Creates a <code>XmlRecord</code> with Context.
     *
     * @return XmlRecord
     */
    public XmlRecord createXmlRecordWithContext() {
        XmlRecord xmlRecord = createXmlRecord();
        xmlRecord.setRContext(createRContext());
        return (xmlRecord);
    }

    /**
     * Creates a <code>XmlCoor</code> with Context.
     *
     * @return XmlCoor
     */
    public XmlCoor createXmlCoorWithContext() {
        XmlCoor xmlCoor = createXmlCoor();
        xmlCoor.setRContext(createRContext());
        return (xmlCoor);
    }

    /**
     * Creates a <code>XmlPosition</code> with Context.
     *
     * @return XmlPosition
     */
    public XmlPosition createXmlPositionWithContext() {
        XmlPosition xmlPosition = createXmlPosition();
        xmlPosition.setRContext(createRContext());
        return (xmlPosition);
    }

    /**
     * Creates a <code>XmlItem</code> with Context.
     *
     * @return XmlItem
     */
    public XmlItem createXmlItemWithContext() {
        XmlItem xmlItem = createXmlItem();
        xmlItem.setRContext(createRContext());
        return (xmlItem);
    }

    /**
     * Creates a <code>XmlBatch</code> with Context.
     *
     * @return XmlBatch
     */
    public XmlBatch createXmlBatchWithContext() {
        XmlBatch xmlBatch = createXmlBatch();
        xmlBatch.setRContext(createRContext());
        return (xmlBatch);
    }

    /**
     * Creates a <code>XmlInstruction</code> with Context.
     *
     * @return XmlInstruction
     */
    public XmlInstruction createXmlInstructionWithContext() {
        XmlInstruction xmlInstruction = createXmlInstruction();
        xmlInstruction.setRContext(createRContext());
        return (xmlInstruction);
    }

    /**
     * Creates a <code>XmlBaseCatalog</code> with Context.
     *
     * @return XmlBaseCatalog
     */
    public XmlBaseCatalog createXmlBaseCatalogWithContext() {
        XmlBaseCatalog xmlBaseCatalog = createXmlBaseCatalog();
        xmlBaseCatalog.setRContext(createRContext());
        return (xmlBaseCatalog);
    }

    /**
     * Creates a <code>XmlOutput</code> with Context.
     *
     * @return XmlOutput
     */
    public XmlOutput createXmlOutputWithContext() {
        XmlOutput xmlOutput = createXmlOutput();
        xmlOutput.setRContext(createRContext());
        return (xmlOutput);
    }

    /**
     * Creates a <code>XmlInformationHolder</code> with Context.
     *
     * @return XmlInformationHolder
     */
    public XmlInformationHolder createXmlInformationHolderWithContext() {
        XmlInformationHolder xmlInformationHolder = createXmlInformationHolder();
        xmlInformationHolder.setRContext(createRContext());
        return (xmlInformationHolder);
    }

    /**
     * Creates a <code>XmlRecordHolder</code> with Context.
     *
     * @return XmlRecordHolder
     */
    public XmlRecordHolder createXmlRecordHolderWithContext() {
        XmlRecordHolder xmlRecordHolder = createXmlRecordHolder();
        xmlRecordHolder.setRContext(createRContext());
        return (xmlRecordHolder);
    }

    /**
     * Creates a <code>XmlMagRecordHolder</code> with Context.
     *
     * @return XmlMagRecordHolder
     */
    public XmlMagRecordHolder createXmlMagRecordHolderWithContext() {
        XmlMagRecordHolder xmlMagRecordHolder = createXmlMagRecordHolder();
        xmlMagRecordHolder.setRContext(createRContext());
        return (xmlMagRecordHolder);
    }

    /**
     * Creates a <code>XmlMagRecord</code> with Context.
     *
     * @return XmlMagRecord
     */
    public XmlMagRecord createXmlMagRecordWithContext() {
        XmlMagRecord xmlMagRecord = createXmlMagRecord();
        xmlMagRecord.setRContext(createRContext());
        return (xmlMagRecord);
    }

    /**
     * Creates a <code>XmlMag</code> with Context.
     *
     * @return XmlMag
     */
    public XmlMag createXmlMagWithContext() {
        XmlMag xmlMag = createXmlMag();
        xmlMag.setRContext(createRContext());
        return (xmlMag);
    }

    /**
     * Creates a <code>XmlReported</code> with Context.
     *
     * @return XmlReported
     */
    public XmlReported createXmlReportedWithContext() {
        XmlReported xmlReported = createXmlReported();
        xmlReported.setRContext(createRContext());
        return (xmlReported);
    }

    /**
     * Creates a <code>XmlDiscarded</code> with Context.
     *
     * @return XmlDiscarded
     */
    public XmlDiscarded createXmlDiscardedWithContext() {
        XmlDiscarded xmlDiscarded = createXmlDiscarded();
        xmlDiscarded.setRContext(createRContext());
        return (xmlDiscarded);
    }

    /**
     * Creates a <code>XmlPreempted</code> with Context.
     *
     * @return XmlPreempted
     */
    public XmlPreempted createXmlPreemptedWithContext() {
        XmlPreempted xmlPreempted = createXmlPreempted();
        xmlPreempted.setRContext(createRContext());
        return (xmlPreempted);
    }

    /**
     * Creates a <code>XmlImported</code> with Context.
     *
     * @return XmlImported
     */
    public XmlImported createXmlImportedWithContext() {
        XmlImported xmlImported = createXmlImported();
        xmlImported.setRContext(createRContext());
        return (xmlImported);
    }

    /**
     * Creates a <code>XmlBlending</code> with Context.
     *
     * @return XmlBlending
     */
    public XmlBlending createXmlBlendingWithContext() {
        XmlBlending xmlBlending = createXmlBlending();
        xmlBlending.setRContext(createRContext());
        return (xmlBlending);
    }

    /**
     * Creates a <code>XmlPositionRecordHolder</code> with Context.
     *
     * @return XmlPositionRecordHolder
     */
    public XmlPositionRecordHolder createXmlPositionRecordHolderWithContext() {
        XmlPositionRecordHolder xmlPositionRecordHolder = createXmlPositionRecordHolder();
        xmlPositionRecordHolder.setRContext(createRContext());
        return (xmlPositionRecordHolder);
    }

    /**
     * Creates a <code>XmlPositionRecord</code> with Context.
     *
     * @return XmlPositionRecord
     */
    public XmlPositionRecord createXmlPositionRecordWithContext() {
        XmlPositionRecord xmlPositionRecord = createXmlPositionRecord();
        xmlPositionRecord.setRContext(createRContext());
        return (xmlPositionRecord);
    }

    /**
     * Creates a <code>XmlVariabilityHolder</code> with Context.
     *
     * @return XmlVariabilityHolder
     */
    public XmlVariabilityHolder createXmlVariabilityHolderWithContext() {
        XmlVariabilityHolder xmlVariabilityHolder = createXmlVariabilityHolder();
        xmlVariabilityHolder.setRContext(createRContext());
        return (xmlVariabilityHolder);
    }

    /**
     * Creates a <code>XmlVariability</code> with Context.
     *
     * @return XmlVariability
     */
    public XmlVariability createXmlVariabilityWithContext() {
        XmlVariability xmlVariability = createXmlVariability();
        xmlVariability.setRContext(createRContext());
        return (xmlVariability);
    }

    /**
     * Creates a <code>XmlConfiguration</code> with Context.
     *
     * @return XmlConfiguration
     */
    public XmlConfiguration createXmlConfigurationWithContext() {
        XmlConfiguration xmlConfiguration = createXmlConfiguration();
        xmlConfiguration.setRContext(createRContext());
        return (xmlConfiguration);
    }

    /**
     * Creates a <code>XmlCatalogPath</code> with Context.
     *
     * @return XmlCatalogPath
     */
    public XmlCatalogPath createXmlCatalogPathWithContext() {
        XmlCatalogPath xmlCatalogPath = createXmlCatalogPath();
        xmlCatalogPath.setRContext(createRContext());
        return (xmlCatalogPath);
    }

    /**
     * Creates a <code>XmlImageConfig</code> with Context.
     *
     * @return XmlImageConfig
     */
    public XmlImageConfig createXmlImageConfigWithContext() {
        XmlImageConfig xmlImageConfig = createXmlImageConfig();
        xmlImageConfig.setRContext(createRContext());
        return (xmlImageConfig);
    }

    /**
     * Creates a <code>XmlPixy</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlPixy
     */
    public XmlPixy createXmlPixy(Document doc) {
        XmlPixy xmlPixy = createXmlPixy();
        xmlPixy.setup(doc);
        return (xmlPixy);
    }

    /**
     * Creates a <code>XmlReport</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlReport
     */
    public XmlReport createXmlReport(Document doc) {
        XmlReport xmlReport = createXmlReport();
        xmlReport.setup(doc);
        return (xmlReport);
    }

    /**
     * Creates a <code>XmlSystem</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlSystem
     */
    public XmlSystem createXmlSystem(Document doc) {
        XmlSystem xmlSystem = createXmlSystem();
        xmlSystem.setup(doc);
        return (xmlSystem);
    }

    /**
     * Creates a <code>XmlInformation</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlInformation
     */
    public XmlInformation createXmlInformation(Document doc) {
        XmlInformation xmlInformation = createXmlInformation();
        xmlInformation.setup(doc);
        return (xmlInformation);
    }

    /**
     * Creates a <code>XmlImage</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlImage
     */
    public XmlImage createXmlImage(Document doc) {
        XmlImage xmlImage = createXmlImage();
        xmlImage.setup(doc);
        return (xmlImage);
    }

    /**
     * Creates a <code>XmlSize</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlSize
     */
    public XmlSize createXmlSize(Document doc) {
        XmlSize xmlSize = createXmlSize();
        xmlSize.setup(doc);
        return (xmlSize);
    }

    /**
     * Creates a <code>XmlExposure</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlExposure
     */
    public XmlExposure createXmlExposure(Document doc) {
        XmlExposure xmlExposure = createXmlExposure();
        xmlExposure.setup(doc);
        return (xmlExposure);
    }

    /**
     * Creates a <code>XmlCenter</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlCenter
     */
    public XmlCenter createXmlCenter(Document doc) {
        XmlCenter xmlCenter = createXmlCenter();
        xmlCenter.setup(doc);
        return (xmlCenter);
    }

    /**
     * Creates a <code>XmlFov</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlFov
     */
    public XmlFov createXmlFov(Document doc) {
        XmlFov xmlFov = createXmlFov();
        xmlFov.setup(doc);
        return (xmlFov);
    }

    /**
     * Creates a <code>XmlRotation</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlRotation
     */
    public XmlRotation createXmlRotation(Document doc) {
        XmlRotation xmlRotation = createXmlRotation();
        xmlRotation.setup(doc);
        return (xmlRotation);
    }

    /**
     * Creates a <code>XmlPixelSize</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlPixelSize
     */
    public XmlPixelSize createXmlPixelSize(Document doc) {
        XmlPixelSize xmlPixelSize = createXmlPixelSize();
        xmlPixelSize.setup(doc);
        return (xmlPixelSize);
    }

    /**
     * Creates a <code>XmlAstrometricError</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlAstrometricError
     */
    public XmlAstrometricError createXmlAstrometricError(Document doc) {
        XmlAstrometricError xmlAstrometricError = createXmlAstrometricError();
        xmlAstrometricError.setup(doc);
        return (xmlAstrometricError);
    }

    /**
     * Creates a <code>XmlDistortionField</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlDistortionField
     */
    public XmlDistortionField createXmlDistortionField(Document doc) {
        XmlDistortionField xmlDistortionField = createXmlDistortionField();
        xmlDistortionField.setup(doc);
        return (xmlDistortionField);
    }

    /**
     * Creates a <code>XmlAstrometry</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlAstrometry
     */
    public XmlAstrometry createXmlAstrometry(Document doc) {
        XmlAstrometry xmlAstrometry = createXmlAstrometry();
        xmlAstrometry.setup(doc);
        return (xmlAstrometry);
    }

    /**
     * Creates a <code>XmlCatalog</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlCatalog
     */
    public XmlCatalog createXmlCatalog(Document doc) {
        XmlCatalog xmlCatalog = createXmlCatalog();
        xmlCatalog.setup(doc);
        return (xmlCatalog);
    }

    /**
     * Creates a <code>XmlPhotometry</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlPhotometry
     */
    public XmlPhotometry createXmlPhotometry(Document doc) {
        XmlPhotometry xmlPhotometry = createXmlPhotometry();
        xmlPhotometry.setup(doc);
        return (xmlPhotometry);
    }

    /**
     * Creates a <code>XmlReversedImage</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlReversedImage
     */
    public XmlReversedImage createXmlReversedImage(Document doc) {
        XmlReversedImage xmlReversedImage = createXmlReversedImage();
        xmlReversedImage.setup(doc);
        return (xmlReversedImage);
    }

    /**
     * Creates a <code>XmlSbigImage</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlSbigImage
     */
    public XmlSbigImage createXmlSbigImage(Document doc) {
        XmlSbigImage xmlSbigImage = createXmlSbigImage();
        xmlSbigImage.setup(doc);
        return (xmlSbigImage);
    }

    /**
     * Creates a <code>XmlUnofficial</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlUnofficial
     */
    public XmlUnofficial createXmlUnofficial(Document doc) {
        XmlUnofficial xmlUnofficial = createXmlUnofficial();
        xmlUnofficial.setup(doc);
        return (xmlUnofficial);
    }

    /**
     * Creates a <code>XmlStarCount</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlStarCount
     */
    public XmlStarCount createXmlStarCount(Document doc) {
        XmlStarCount xmlStarCount = createXmlStarCount();
        xmlStarCount.setup(doc);
        return (xmlStarCount);
    }

    /**
     * Creates a <code>XmlData</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlData
     */
    public XmlData createXmlData(Document doc) {
        XmlData xmlData = createXmlData();
        xmlData.setup(doc);
        return (xmlData);
    }

    /**
     * Creates a <code>XmlStar</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlStar
     */
    public XmlStar createXmlStar(Document doc) {
        XmlStar xmlStar = createXmlStar();
        xmlStar.setup(doc);
        return (xmlStar);
    }

    /**
     * Creates a <code>XmlRecord</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlRecord
     */
    public XmlRecord createXmlRecord(Document doc) {
        XmlRecord xmlRecord = createXmlRecord();
        xmlRecord.setup(doc);
        return (xmlRecord);
    }

    /**
     * Creates a <code>XmlCoor</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlCoor
     */
    public XmlCoor createXmlCoor(Document doc) {
        XmlCoor xmlCoor = createXmlCoor();
        xmlCoor.setup(doc);
        return (xmlCoor);
    }

    /**
     * Creates a <code>XmlPosition</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlPosition
     */
    public XmlPosition createXmlPosition(Document doc) {
        XmlPosition xmlPosition = createXmlPosition();
        xmlPosition.setup(doc);
        return (xmlPosition);
    }

    /**
     * Creates a <code>XmlItem</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlItem
     */
    public XmlItem createXmlItem(Document doc) {
        XmlItem xmlItem = createXmlItem();
        xmlItem.setup(doc);
        return (xmlItem);
    }

    /**
     * Creates a <code>XmlBatch</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlBatch
     */
    public XmlBatch createXmlBatch(Document doc) {
        XmlBatch xmlBatch = createXmlBatch();
        xmlBatch.setup(doc);
        return (xmlBatch);
    }

    /**
     * Creates a <code>XmlInstruction</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlInstruction
     */
    public XmlInstruction createXmlInstruction(Document doc) {
        XmlInstruction xmlInstruction = createXmlInstruction();
        xmlInstruction.setup(doc);
        return (xmlInstruction);
    }

    /**
     * Creates a <code>XmlBaseCatalog</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlBaseCatalog
     */
    public XmlBaseCatalog createXmlBaseCatalog(Document doc) {
        XmlBaseCatalog xmlBaseCatalog = createXmlBaseCatalog();
        xmlBaseCatalog.setup(doc);
        return (xmlBaseCatalog);
    }

    /**
     * Creates a <code>XmlOutput</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlOutput
     */
    public XmlOutput createXmlOutput(Document doc) {
        XmlOutput xmlOutput = createXmlOutput();
        xmlOutput.setup(doc);
        return (xmlOutput);
    }

    /**
     * Creates a <code>XmlInformationHolder</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlInformationHolder
     */
    public XmlInformationHolder createXmlInformationHolder(Document doc) {
        XmlInformationHolder xmlInformationHolder = createXmlInformationHolder();
        xmlInformationHolder.setup(doc);
        return (xmlInformationHolder);
    }

    /**
     * Creates a <code>XmlRecordHolder</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlRecordHolder
     */
    public XmlRecordHolder createXmlRecordHolder(Document doc) {
        XmlRecordHolder xmlRecordHolder = createXmlRecordHolder();
        xmlRecordHolder.setup(doc);
        return (xmlRecordHolder);
    }

    /**
     * Creates a <code>XmlMagRecordHolder</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlMagRecordHolder
     */
    public XmlMagRecordHolder createXmlMagRecordHolder(Document doc) {
        XmlMagRecordHolder xmlMagRecordHolder = createXmlMagRecordHolder();
        xmlMagRecordHolder.setup(doc);
        return (xmlMagRecordHolder);
    }

    /**
     * Creates a <code>XmlMagRecord</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlMagRecord
     */
    public XmlMagRecord createXmlMagRecord(Document doc) {
        XmlMagRecord xmlMagRecord = createXmlMagRecord();
        xmlMagRecord.setup(doc);
        return (xmlMagRecord);
    }

    /**
     * Creates a <code>XmlMag</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlMag
     */
    public XmlMag createXmlMag(Document doc) {
        XmlMag xmlMag = createXmlMag();
        xmlMag.setup(doc);
        return (xmlMag);
    }

    /**
     * Creates a <code>XmlReported</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlReported
     */
    public XmlReported createXmlReported(Document doc) {
        XmlReported xmlReported = createXmlReported();
        xmlReported.setup(doc);
        return (xmlReported);
    }

    /**
     * Creates a <code>XmlDiscarded</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlDiscarded
     */
    public XmlDiscarded createXmlDiscarded(Document doc) {
        XmlDiscarded xmlDiscarded = createXmlDiscarded();
        xmlDiscarded.setup(doc);
        return (xmlDiscarded);
    }

    /**
     * Creates a <code>XmlPreempted</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlPreempted
     */
    public XmlPreempted createXmlPreempted(Document doc) {
        XmlPreempted xmlPreempted = createXmlPreempted();
        xmlPreempted.setup(doc);
        return (xmlPreempted);
    }

    /**
     * Creates a <code>XmlImported</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlImported
     */
    public XmlImported createXmlImported(Document doc) {
        XmlImported xmlImported = createXmlImported();
        xmlImported.setup(doc);
        return (xmlImported);
    }

    /**
     * Creates a <code>XmlBlending</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlBlending
     */
    public XmlBlending createXmlBlending(Document doc) {
        XmlBlending xmlBlending = createXmlBlending();
        xmlBlending.setup(doc);
        return (xmlBlending);
    }

    /**
     * Creates a <code>XmlPositionRecordHolder</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlPositionRecordHolder
     */
    public XmlPositionRecordHolder createXmlPositionRecordHolder(Document doc) {
        XmlPositionRecordHolder xmlPositionRecordHolder = createXmlPositionRecordHolder();
        xmlPositionRecordHolder.setup(doc);
        return (xmlPositionRecordHolder);
    }

    /**
     * Creates a <code>XmlPositionRecord</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlPositionRecord
     */
    public XmlPositionRecord createXmlPositionRecord(Document doc) {
        XmlPositionRecord xmlPositionRecord = createXmlPositionRecord();
        xmlPositionRecord.setup(doc);
        return (xmlPositionRecord);
    }

    /**
     * Creates a <code>XmlVariabilityHolder</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlVariabilityHolder
     */
    public XmlVariabilityHolder createXmlVariabilityHolder(Document doc) {
        XmlVariabilityHolder xmlVariabilityHolder = createXmlVariabilityHolder();
        xmlVariabilityHolder.setup(doc);
        return (xmlVariabilityHolder);
    }

    /**
     * Creates a <code>XmlVariability</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlVariability
     */
    public XmlVariability createXmlVariability(Document doc) {
        XmlVariability xmlVariability = createXmlVariability();
        xmlVariability.setup(doc);
        return (xmlVariability);
    }

    /**
     * Creates a <code>XmlConfiguration</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlConfiguration
     */
    public XmlConfiguration createXmlConfiguration(Document doc) {
        XmlConfiguration xmlConfiguration = createXmlConfiguration();
        xmlConfiguration.setup(doc);
        return (xmlConfiguration);
    }

    /**
     * Creates a <code>XmlCatalogPath</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlCatalogPath
     */
    public XmlCatalogPath createXmlCatalogPath(Document doc) {
        XmlCatalogPath xmlCatalogPath = createXmlCatalogPath();
        xmlCatalogPath.setup(doc);
        return (xmlCatalogPath);
    }

    /**
     * Creates a <code>XmlImageConfig</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlImageConfig
     */
    public XmlImageConfig createXmlImageConfig(Document doc) {
        XmlImageConfig xmlImageConfig = createXmlImageConfig();
        xmlImageConfig.setup(doc);
        return (xmlImageConfig);
    }

    /**
     * Creates a <code>XmlPixy</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlPixy
     */
    public XmlPixy createXmlPixyWithContext(Document doc) {
        XmlPixy xmlPixy = createXmlPixy(doc);
        xmlPixy.setRContext(createRContext());
        return (xmlPixy);
    }

    /**
     * Creates a <code>XmlReport</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlReport
     */
    public XmlReport createXmlReportWithContext(Document doc) {
        XmlReport xmlReport = createXmlReport(doc);
        xmlReport.setRContext(createRContext());
        return (xmlReport);
    }

    /**
     * Creates a <code>XmlSystem</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlSystem
     */
    public XmlSystem createXmlSystemWithContext(Document doc) {
        XmlSystem xmlSystem = createXmlSystem(doc);
        xmlSystem.setRContext(createRContext());
        return (xmlSystem);
    }

    /**
     * Creates a <code>XmlInformation</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlInformation
     */
    public XmlInformation createXmlInformationWithContext(Document doc) {
        XmlInformation xmlInformation = createXmlInformation(doc);
        xmlInformation.setRContext(createRContext());
        return (xmlInformation);
    }

    /**
     * Creates a <code>XmlImage</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlImage
     */
    public XmlImage createXmlImageWithContext(Document doc) {
        XmlImage xmlImage = createXmlImage(doc);
        xmlImage.setRContext(createRContext());
        return (xmlImage);
    }

    /**
     * Creates a <code>XmlSize</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlSize
     */
    public XmlSize createXmlSizeWithContext(Document doc) {
        XmlSize xmlSize = createXmlSize(doc);
        xmlSize.setRContext(createRContext());
        return (xmlSize);
    }

    /**
     * Creates a <code>XmlExposure</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlExposure
     */
    public XmlExposure createXmlExposureWithContext(Document doc) {
        XmlExposure xmlExposure = createXmlExposure(doc);
        xmlExposure.setRContext(createRContext());
        return (xmlExposure);
    }

    /**
     * Creates a <code>XmlCenter</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlCenter
     */
    public XmlCenter createXmlCenterWithContext(Document doc) {
        XmlCenter xmlCenter = createXmlCenter(doc);
        xmlCenter.setRContext(createRContext());
        return (xmlCenter);
    }

    /**
     * Creates a <code>XmlFov</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlFov
     */
    public XmlFov createXmlFovWithContext(Document doc) {
        XmlFov xmlFov = createXmlFov(doc);
        xmlFov.setRContext(createRContext());
        return (xmlFov);
    }

    /**
     * Creates a <code>XmlRotation</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlRotation
     */
    public XmlRotation createXmlRotationWithContext(Document doc) {
        XmlRotation xmlRotation = createXmlRotation(doc);
        xmlRotation.setRContext(createRContext());
        return (xmlRotation);
    }

    /**
     * Creates a <code>XmlPixelSize</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlPixelSize
     */
    public XmlPixelSize createXmlPixelSizeWithContext(Document doc) {
        XmlPixelSize xmlPixelSize = createXmlPixelSize(doc);
        xmlPixelSize.setRContext(createRContext());
        return (xmlPixelSize);
    }

    /**
     * Creates a <code>XmlAstrometricError</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlAstrometricError
     */
    public XmlAstrometricError createXmlAstrometricErrorWithContext(Document doc) {
        XmlAstrometricError xmlAstrometricError = createXmlAstrometricError(doc);
        xmlAstrometricError.setRContext(createRContext());
        return (xmlAstrometricError);
    }

    /**
     * Creates a <code>XmlDistortionField</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlDistortionField
     */
    public XmlDistortionField createXmlDistortionFieldWithContext(Document doc) {
        XmlDistortionField xmlDistortionField = createXmlDistortionField(doc);
        xmlDistortionField.setRContext(createRContext());
        return (xmlDistortionField);
    }

    /**
     * Creates a <code>XmlAstrometry</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlAstrometry
     */
    public XmlAstrometry createXmlAstrometryWithContext(Document doc) {
        XmlAstrometry xmlAstrometry = createXmlAstrometry(doc);
        xmlAstrometry.setRContext(createRContext());
        return (xmlAstrometry);
    }

    /**
     * Creates a <code>XmlCatalog</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlCatalog
     */
    public XmlCatalog createXmlCatalogWithContext(Document doc) {
        XmlCatalog xmlCatalog = createXmlCatalog(doc);
        xmlCatalog.setRContext(createRContext());
        return (xmlCatalog);
    }

    /**
     * Creates a <code>XmlPhotometry</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlPhotometry
     */
    public XmlPhotometry createXmlPhotometryWithContext(Document doc) {
        XmlPhotometry xmlPhotometry = createXmlPhotometry(doc);
        xmlPhotometry.setRContext(createRContext());
        return (xmlPhotometry);
    }

    /**
     * Creates a <code>XmlReversedImage</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlReversedImage
     */
    public XmlReversedImage createXmlReversedImageWithContext(Document doc) {
        XmlReversedImage xmlReversedImage = createXmlReversedImage(doc);
        xmlReversedImage.setRContext(createRContext());
        return (xmlReversedImage);
    }

    /**
     * Creates a <code>XmlSbigImage</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlSbigImage
     */
    public XmlSbigImage createXmlSbigImageWithContext(Document doc) {
        XmlSbigImage xmlSbigImage = createXmlSbigImage(doc);
        xmlSbigImage.setRContext(createRContext());
        return (xmlSbigImage);
    }

    /**
     * Creates a <code>XmlUnofficial</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlUnofficial
     */
    public XmlUnofficial createXmlUnofficialWithContext(Document doc) {
        XmlUnofficial xmlUnofficial = createXmlUnofficial(doc);
        xmlUnofficial.setRContext(createRContext());
        return (xmlUnofficial);
    }

    /**
     * Creates a <code>XmlStarCount</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlStarCount
     */
    public XmlStarCount createXmlStarCountWithContext(Document doc) {
        XmlStarCount xmlStarCount = createXmlStarCount(doc);
        xmlStarCount.setRContext(createRContext());
        return (xmlStarCount);
    }

    /**
     * Creates a <code>XmlData</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlData
     */
    public XmlData createXmlDataWithContext(Document doc) {
        XmlData xmlData = createXmlData(doc);
        xmlData.setRContext(createRContext());
        return (xmlData);
    }

    /**
     * Creates a <code>XmlStar</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlStar
     */
    public XmlStar createXmlStarWithContext(Document doc) {
        XmlStar xmlStar = createXmlStar(doc);
        xmlStar.setRContext(createRContext());
        return (xmlStar);
    }

    /**
     * Creates a <code>XmlRecord</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlRecord
     */
    public XmlRecord createXmlRecordWithContext(Document doc) {
        XmlRecord xmlRecord = createXmlRecord(doc);
        xmlRecord.setRContext(createRContext());
        return (xmlRecord);
    }

    /**
     * Creates a <code>XmlCoor</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlCoor
     */
    public XmlCoor createXmlCoorWithContext(Document doc) {
        XmlCoor xmlCoor = createXmlCoor(doc);
        xmlCoor.setRContext(createRContext());
        return (xmlCoor);
    }

    /**
     * Creates a <code>XmlPosition</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlPosition
     */
    public XmlPosition createXmlPositionWithContext(Document doc) {
        XmlPosition xmlPosition = createXmlPosition(doc);
        xmlPosition.setRContext(createRContext());
        return (xmlPosition);
    }

    /**
     * Creates a <code>XmlItem</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlItem
     */
    public XmlItem createXmlItemWithContext(Document doc) {
        XmlItem xmlItem = createXmlItem(doc);
        xmlItem.setRContext(createRContext());
        return (xmlItem);
    }

    /**
     * Creates a <code>XmlBatch</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlBatch
     */
    public XmlBatch createXmlBatchWithContext(Document doc) {
        XmlBatch xmlBatch = createXmlBatch(doc);
        xmlBatch.setRContext(createRContext());
        return (xmlBatch);
    }

    /**
     * Creates a <code>XmlInstruction</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlInstruction
     */
    public XmlInstruction createXmlInstructionWithContext(Document doc) {
        XmlInstruction xmlInstruction = createXmlInstruction(doc);
        xmlInstruction.setRContext(createRContext());
        return (xmlInstruction);
    }

    /**
     * Creates a <code>XmlBaseCatalog</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlBaseCatalog
     */
    public XmlBaseCatalog createXmlBaseCatalogWithContext(Document doc) {
        XmlBaseCatalog xmlBaseCatalog = createXmlBaseCatalog(doc);
        xmlBaseCatalog.setRContext(createRContext());
        return (xmlBaseCatalog);
    }

    /**
     * Creates a <code>XmlOutput</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlOutput
     */
    public XmlOutput createXmlOutputWithContext(Document doc) {
        XmlOutput xmlOutput = createXmlOutput(doc);
        xmlOutput.setRContext(createRContext());
        return (xmlOutput);
    }

    /**
     * Creates a <code>XmlInformationHolder</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlInformationHolder
     */
    public XmlInformationHolder createXmlInformationHolderWithContext(Document doc) {
        XmlInformationHolder xmlInformationHolder = createXmlInformationHolder(doc);
        xmlInformationHolder.setRContext(createRContext());
        return (xmlInformationHolder);
    }

    /**
     * Creates a <code>XmlRecordHolder</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlRecordHolder
     */
    public XmlRecordHolder createXmlRecordHolderWithContext(Document doc) {
        XmlRecordHolder xmlRecordHolder = createXmlRecordHolder(doc);
        xmlRecordHolder.setRContext(createRContext());
        return (xmlRecordHolder);
    }

    /**
     * Creates a <code>XmlMagRecordHolder</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlMagRecordHolder
     */
    public XmlMagRecordHolder createXmlMagRecordHolderWithContext(Document doc) {
        XmlMagRecordHolder xmlMagRecordHolder = createXmlMagRecordHolder(doc);
        xmlMagRecordHolder.setRContext(createRContext());
        return (xmlMagRecordHolder);
    }

    /**
     * Creates a <code>XmlMagRecord</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlMagRecord
     */
    public XmlMagRecord createXmlMagRecordWithContext(Document doc) {
        XmlMagRecord xmlMagRecord = createXmlMagRecord(doc);
        xmlMagRecord.setRContext(createRContext());
        return (xmlMagRecord);
    }

    /**
     * Creates a <code>XmlMag</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlMag
     */
    public XmlMag createXmlMagWithContext(Document doc) {
        XmlMag xmlMag = createXmlMag(doc);
        xmlMag.setRContext(createRContext());
        return (xmlMag);
    }

    /**
     * Creates a <code>XmlReported</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlReported
     */
    public XmlReported createXmlReportedWithContext(Document doc) {
        XmlReported xmlReported = createXmlReported(doc);
        xmlReported.setRContext(createRContext());
        return (xmlReported);
    }

    /**
     * Creates a <code>XmlDiscarded</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlDiscarded
     */
    public XmlDiscarded createXmlDiscardedWithContext(Document doc) {
        XmlDiscarded xmlDiscarded = createXmlDiscarded(doc);
        xmlDiscarded.setRContext(createRContext());
        return (xmlDiscarded);
    }

    /**
     * Creates a <code>XmlPreempted</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlPreempted
     */
    public XmlPreempted createXmlPreemptedWithContext(Document doc) {
        XmlPreempted xmlPreempted = createXmlPreempted(doc);
        xmlPreempted.setRContext(createRContext());
        return (xmlPreempted);
    }

    /**
     * Creates a <code>XmlImported</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlImported
     */
    public XmlImported createXmlImportedWithContext(Document doc) {
        XmlImported xmlImported = createXmlImported(doc);
        xmlImported.setRContext(createRContext());
        return (xmlImported);
    }

    /**
     * Creates a <code>XmlBlending</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlBlending
     */
    public XmlBlending createXmlBlendingWithContext(Document doc) {
        XmlBlending xmlBlending = createXmlBlending(doc);
        xmlBlending.setRContext(createRContext());
        return (xmlBlending);
    }

    /**
     * Creates a <code>XmlPositionRecordHolder</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlPositionRecordHolder
     */
    public XmlPositionRecordHolder createXmlPositionRecordHolderWithContext(Document doc) {
        XmlPositionRecordHolder xmlPositionRecordHolder = createXmlPositionRecordHolder(doc);
        xmlPositionRecordHolder.setRContext(createRContext());
        return (xmlPositionRecordHolder);
    }

    /**
     * Creates a <code>XmlPositionRecord</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlPositionRecord
     */
    public XmlPositionRecord createXmlPositionRecordWithContext(Document doc) {
        XmlPositionRecord xmlPositionRecord = createXmlPositionRecord(doc);
        xmlPositionRecord.setRContext(createRContext());
        return (xmlPositionRecord);
    }

    /**
     * Creates a <code>XmlVariabilityHolder</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlVariabilityHolder
     */
    public XmlVariabilityHolder createXmlVariabilityHolderWithContext(Document doc) {
        XmlVariabilityHolder xmlVariabilityHolder = createXmlVariabilityHolder(doc);
        xmlVariabilityHolder.setRContext(createRContext());
        return (xmlVariabilityHolder);
    }

    /**
     * Creates a <code>XmlVariability</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlVariability
     */
    public XmlVariability createXmlVariabilityWithContext(Document doc) {
        XmlVariability xmlVariability = createXmlVariability(doc);
        xmlVariability.setRContext(createRContext());
        return (xmlVariability);
    }

    /**
     * Creates a <code>XmlConfiguration</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlConfiguration
     */
    public XmlConfiguration createXmlConfigurationWithContext(Document doc) {
        XmlConfiguration xmlConfiguration = createXmlConfiguration(doc);
        xmlConfiguration.setRContext(createRContext());
        return (xmlConfiguration);
    }

    /**
     * Creates a <code>XmlCatalogPath</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlCatalogPath
     */
    public XmlCatalogPath createXmlCatalogPathWithContext(Document doc) {
        XmlCatalogPath xmlCatalogPath = createXmlCatalogPath(doc);
        xmlCatalogPath.setRContext(createRContext());
        return (xmlCatalogPath);
    }

    /**
     * Creates a <code>XmlImageConfig</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XmlImageConfig
     */
    public XmlImageConfig createXmlImageConfigWithContext(Document doc) {
        XmlImageConfig xmlImageConfig = createXmlImageConfig(doc);
        xmlImageConfig.setRContext(createRContext());
        return (xmlImageConfig);
    }

    /**
     * Creates a <code>XmlPixy</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlPixy
     */
    public XmlPixy createXmlPixy(Element element) {
        XmlPixy xmlPixy = createXmlPixy();
        xmlPixy.setup(element);
        return (xmlPixy);
    }

    /**
     * Creates a <code>XmlReport</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlReport
     */
    public XmlReport createXmlReport(Element element) {
        XmlReport xmlReport = createXmlReport();
        xmlReport.setup(element);
        return (xmlReport);
    }

    /**
     * Creates a <code>XmlSystem</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlSystem
     */
    public XmlSystem createXmlSystem(Element element) {
        XmlSystem xmlSystem = createXmlSystem();
        xmlSystem.setup(element);
        return (xmlSystem);
    }

    /**
     * Creates a <code>XmlInformation</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlInformation
     */
    public XmlInformation createXmlInformation(Element element) {
        XmlInformation xmlInformation = createXmlInformation();
        xmlInformation.setup(element);
        return (xmlInformation);
    }

    /**
     * Creates a <code>XmlImage</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlImage
     */
    public XmlImage createXmlImage(Element element) {
        XmlImage xmlImage = createXmlImage();
        xmlImage.setup(element);
        return (xmlImage);
    }

    /**
     * Creates a <code>XmlSize</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlSize
     */
    public XmlSize createXmlSize(Element element) {
        XmlSize xmlSize = createXmlSize();
        xmlSize.setup(element);
        return (xmlSize);
    }

    /**
     * Creates a <code>XmlExposure</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlExposure
     */
    public XmlExposure createXmlExposure(Element element) {
        XmlExposure xmlExposure = createXmlExposure();
        xmlExposure.setup(element);
        return (xmlExposure);
    }

    /**
     * Creates a <code>XmlCenter</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlCenter
     */
    public XmlCenter createXmlCenter(Element element) {
        XmlCenter xmlCenter = createXmlCenter();
        xmlCenter.setup(element);
        return (xmlCenter);
    }

    /**
     * Creates a <code>XmlFov</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlFov
     */
    public XmlFov createXmlFov(Element element) {
        XmlFov xmlFov = createXmlFov();
        xmlFov.setup(element);
        return (xmlFov);
    }

    /**
     * Creates a <code>XmlRotation</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlRotation
     */
    public XmlRotation createXmlRotation(Element element) {
        XmlRotation xmlRotation = createXmlRotation();
        xmlRotation.setup(element);
        return (xmlRotation);
    }

    /**
     * Creates a <code>XmlPixelSize</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlPixelSize
     */
    public XmlPixelSize createXmlPixelSize(Element element) {
        XmlPixelSize xmlPixelSize = createXmlPixelSize();
        xmlPixelSize.setup(element);
        return (xmlPixelSize);
    }

    /**
     * Creates a <code>XmlAstrometricError</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlAstrometricError
     */
    public XmlAstrometricError createXmlAstrometricError(Element element) {
        XmlAstrometricError xmlAstrometricError = createXmlAstrometricError();
        xmlAstrometricError.setup(element);
        return (xmlAstrometricError);
    }

    /**
     * Creates a <code>XmlDistortionField</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlDistortionField
     */
    public XmlDistortionField createXmlDistortionField(Element element) {
        XmlDistortionField xmlDistortionField = createXmlDistortionField();
        xmlDistortionField.setup(element);
        return (xmlDistortionField);
    }

    /**
     * Creates a <code>XmlAstrometry</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlAstrometry
     */
    public XmlAstrometry createXmlAstrometry(Element element) {
        XmlAstrometry xmlAstrometry = createXmlAstrometry();
        xmlAstrometry.setup(element);
        return (xmlAstrometry);
    }

    /**
     * Creates a <code>XmlCatalog</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlCatalog
     */
    public XmlCatalog createXmlCatalog(Element element) {
        XmlCatalog xmlCatalog = createXmlCatalog();
        xmlCatalog.setup(element);
        return (xmlCatalog);
    }

    /**
     * Creates a <code>XmlPhotometry</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlPhotometry
     */
    public XmlPhotometry createXmlPhotometry(Element element) {
        XmlPhotometry xmlPhotometry = createXmlPhotometry();
        xmlPhotometry.setup(element);
        return (xmlPhotometry);
    }

    /**
     * Creates a <code>XmlReversedImage</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlReversedImage
     */
    public XmlReversedImage createXmlReversedImage(Element element) {
        XmlReversedImage xmlReversedImage = createXmlReversedImage();
        xmlReversedImage.setup(element);
        return (xmlReversedImage);
    }

    /**
     * Creates a <code>XmlSbigImage</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlSbigImage
     */
    public XmlSbigImage createXmlSbigImage(Element element) {
        XmlSbigImage xmlSbigImage = createXmlSbigImage();
        xmlSbigImage.setup(element);
        return (xmlSbigImage);
    }

    /**
     * Creates a <code>XmlUnofficial</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlUnofficial
     */
    public XmlUnofficial createXmlUnofficial(Element element) {
        XmlUnofficial xmlUnofficial = createXmlUnofficial();
        xmlUnofficial.setup(element);
        return (xmlUnofficial);
    }

    /**
     * Creates a <code>XmlStarCount</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlStarCount
     */
    public XmlStarCount createXmlStarCount(Element element) {
        XmlStarCount xmlStarCount = createXmlStarCount();
        xmlStarCount.setup(element);
        return (xmlStarCount);
    }

    /**
     * Creates a <code>XmlData</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlData
     */
    public XmlData createXmlData(Element element) {
        XmlData xmlData = createXmlData();
        xmlData.setup(element);
        return (xmlData);
    }

    /**
     * Creates a <code>XmlStar</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlStar
     */
    public XmlStar createXmlStar(Element element) {
        XmlStar xmlStar = createXmlStar();
        xmlStar.setup(element);
        return (xmlStar);
    }

    /**
     * Creates a <code>XmlRecord</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlRecord
     */
    public XmlRecord createXmlRecord(Element element) {
        XmlRecord xmlRecord = createXmlRecord();
        xmlRecord.setup(element);
        return (xmlRecord);
    }

    /**
     * Creates a <code>XmlCoor</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlCoor
     */
    public XmlCoor createXmlCoor(Element element) {
        XmlCoor xmlCoor = createXmlCoor();
        xmlCoor.setup(element);
        return (xmlCoor);
    }

    /**
     * Creates a <code>XmlPosition</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlPosition
     */
    public XmlPosition createXmlPosition(Element element) {
        XmlPosition xmlPosition = createXmlPosition();
        xmlPosition.setup(element);
        return (xmlPosition);
    }

    /**
     * Creates a <code>XmlItem</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlItem
     */
    public XmlItem createXmlItem(Element element) {
        XmlItem xmlItem = createXmlItem();
        xmlItem.setup(element);
        return (xmlItem);
    }

    /**
     * Creates a <code>XmlBatch</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlBatch
     */
    public XmlBatch createXmlBatch(Element element) {
        XmlBatch xmlBatch = createXmlBatch();
        xmlBatch.setup(element);
        return (xmlBatch);
    }

    /**
     * Creates a <code>XmlInstruction</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlInstruction
     */
    public XmlInstruction createXmlInstruction(Element element) {
        XmlInstruction xmlInstruction = createXmlInstruction();
        xmlInstruction.setup(element);
        return (xmlInstruction);
    }

    /**
     * Creates a <code>XmlBaseCatalog</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlBaseCatalog
     */
    public XmlBaseCatalog createXmlBaseCatalog(Element element) {
        XmlBaseCatalog xmlBaseCatalog = createXmlBaseCatalog();
        xmlBaseCatalog.setup(element);
        return (xmlBaseCatalog);
    }

    /**
     * Creates a <code>XmlOutput</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlOutput
     */
    public XmlOutput createXmlOutput(Element element) {
        XmlOutput xmlOutput = createXmlOutput();
        xmlOutput.setup(element);
        return (xmlOutput);
    }

    /**
     * Creates a <code>XmlInformationHolder</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlInformationHolder
     */
    public XmlInformationHolder createXmlInformationHolder(Element element) {
        XmlInformationHolder xmlInformationHolder = createXmlInformationHolder();
        xmlInformationHolder.setup(element);
        return (xmlInformationHolder);
    }

    /**
     * Creates a <code>XmlRecordHolder</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlRecordHolder
     */
    public XmlRecordHolder createXmlRecordHolder(Element element) {
        XmlRecordHolder xmlRecordHolder = createXmlRecordHolder();
        xmlRecordHolder.setup(element);
        return (xmlRecordHolder);
    }

    /**
     * Creates a <code>XmlMagRecordHolder</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlMagRecordHolder
     */
    public XmlMagRecordHolder createXmlMagRecordHolder(Element element) {
        XmlMagRecordHolder xmlMagRecordHolder = createXmlMagRecordHolder();
        xmlMagRecordHolder.setup(element);
        return (xmlMagRecordHolder);
    }

    /**
     * Creates a <code>XmlMagRecord</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlMagRecord
     */
    public XmlMagRecord createXmlMagRecord(Element element) {
        XmlMagRecord xmlMagRecord = createXmlMagRecord();
        xmlMagRecord.setup(element);
        return (xmlMagRecord);
    }

    /**
     * Creates a <code>XmlMag</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlMag
     */
    public XmlMag createXmlMag(Element element) {
        XmlMag xmlMag = createXmlMag();
        xmlMag.setup(element);
        return (xmlMag);
    }

    /**
     * Creates a <code>XmlReported</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlReported
     */
    public XmlReported createXmlReported(Element element) {
        XmlReported xmlReported = createXmlReported();
        xmlReported.setup(element);
        return (xmlReported);
    }

    /**
     * Creates a <code>XmlDiscarded</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlDiscarded
     */
    public XmlDiscarded createXmlDiscarded(Element element) {
        XmlDiscarded xmlDiscarded = createXmlDiscarded();
        xmlDiscarded.setup(element);
        return (xmlDiscarded);
    }

    /**
     * Creates a <code>XmlPreempted</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlPreempted
     */
    public XmlPreempted createXmlPreempted(Element element) {
        XmlPreempted xmlPreempted = createXmlPreempted();
        xmlPreempted.setup(element);
        return (xmlPreempted);
    }

    /**
     * Creates a <code>XmlImported</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlImported
     */
    public XmlImported createXmlImported(Element element) {
        XmlImported xmlImported = createXmlImported();
        xmlImported.setup(element);
        return (xmlImported);
    }

    /**
     * Creates a <code>XmlBlending</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlBlending
     */
    public XmlBlending createXmlBlending(Element element) {
        XmlBlending xmlBlending = createXmlBlending();
        xmlBlending.setup(element);
        return (xmlBlending);
    }

    /**
     * Creates a <code>XmlPositionRecordHolder</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlPositionRecordHolder
     */
    public XmlPositionRecordHolder createXmlPositionRecordHolder(Element element) {
        XmlPositionRecordHolder xmlPositionRecordHolder = createXmlPositionRecordHolder();
        xmlPositionRecordHolder.setup(element);
        return (xmlPositionRecordHolder);
    }

    /**
     * Creates a <code>XmlPositionRecord</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlPositionRecord
     */
    public XmlPositionRecord createXmlPositionRecord(Element element) {
        XmlPositionRecord xmlPositionRecord = createXmlPositionRecord();
        xmlPositionRecord.setup(element);
        return (xmlPositionRecord);
    }

    /**
     * Creates a <code>XmlVariabilityHolder</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlVariabilityHolder
     */
    public XmlVariabilityHolder createXmlVariabilityHolder(Element element) {
        XmlVariabilityHolder xmlVariabilityHolder = createXmlVariabilityHolder();
        xmlVariabilityHolder.setup(element);
        return (xmlVariabilityHolder);
    }

    /**
     * Creates a <code>XmlVariability</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlVariability
     */
    public XmlVariability createXmlVariability(Element element) {
        XmlVariability xmlVariability = createXmlVariability();
        xmlVariability.setup(element);
        return (xmlVariability);
    }

    /**
     * Creates a <code>XmlConfiguration</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlConfiguration
     */
    public XmlConfiguration createXmlConfiguration(Element element) {
        XmlConfiguration xmlConfiguration = createXmlConfiguration();
        xmlConfiguration.setup(element);
        return (xmlConfiguration);
    }

    /**
     * Creates a <code>XmlCatalogPath</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlCatalogPath
     */
    public XmlCatalogPath createXmlCatalogPath(Element element) {
        XmlCatalogPath xmlCatalogPath = createXmlCatalogPath();
        xmlCatalogPath.setup(element);
        return (xmlCatalogPath);
    }

    /**
     * Creates a <code>XmlImageConfig</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlImageConfig
     */
    public XmlImageConfig createXmlImageConfig(Element element) {
        XmlImageConfig xmlImageConfig = createXmlImageConfig();
        xmlImageConfig.setup(element);
        return (xmlImageConfig);
    }

    /**
     * Creates a <code>XmlPixy</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlPixy
     */
    public XmlPixy createXmlPixyWithContext(Element element) {
        XmlPixy xmlPixy = createXmlPixy(element);
        xmlPixy.setRContext(createRContext());
        return (xmlPixy);
    }

    /**
     * Creates a <code>XmlReport</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlReport
     */
    public XmlReport createXmlReportWithContext(Element element) {
        XmlReport xmlReport = createXmlReport(element);
        xmlReport.setRContext(createRContext());
        return (xmlReport);
    }

    /**
     * Creates a <code>XmlSystem</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlSystem
     */
    public XmlSystem createXmlSystemWithContext(Element element) {
        XmlSystem xmlSystem = createXmlSystem(element);
        xmlSystem.setRContext(createRContext());
        return (xmlSystem);
    }

    /**
     * Creates a <code>XmlInformation</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlInformation
     */
    public XmlInformation createXmlInformationWithContext(Element element) {
        XmlInformation xmlInformation = createXmlInformation(element);
        xmlInformation.setRContext(createRContext());
        return (xmlInformation);
    }

    /**
     * Creates a <code>XmlImage</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlImage
     */
    public XmlImage createXmlImageWithContext(Element element) {
        XmlImage xmlImage = createXmlImage(element);
        xmlImage.setRContext(createRContext());
        return (xmlImage);
    }

    /**
     * Creates a <code>XmlSize</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlSize
     */
    public XmlSize createXmlSizeWithContext(Element element) {
        XmlSize xmlSize = createXmlSize(element);
        xmlSize.setRContext(createRContext());
        return (xmlSize);
    }

    /**
     * Creates a <code>XmlExposure</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlExposure
     */
    public XmlExposure createXmlExposureWithContext(Element element) {
        XmlExposure xmlExposure = createXmlExposure(element);
        xmlExposure.setRContext(createRContext());
        return (xmlExposure);
    }

    /**
     * Creates a <code>XmlCenter</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlCenter
     */
    public XmlCenter createXmlCenterWithContext(Element element) {
        XmlCenter xmlCenter = createXmlCenter(element);
        xmlCenter.setRContext(createRContext());
        return (xmlCenter);
    }

    /**
     * Creates a <code>XmlFov</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlFov
     */
    public XmlFov createXmlFovWithContext(Element element) {
        XmlFov xmlFov = createXmlFov(element);
        xmlFov.setRContext(createRContext());
        return (xmlFov);
    }

    /**
     * Creates a <code>XmlRotation</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlRotation
     */
    public XmlRotation createXmlRotationWithContext(Element element) {
        XmlRotation xmlRotation = createXmlRotation(element);
        xmlRotation.setRContext(createRContext());
        return (xmlRotation);
    }

    /**
     * Creates a <code>XmlPixelSize</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlPixelSize
     */
    public XmlPixelSize createXmlPixelSizeWithContext(Element element) {
        XmlPixelSize xmlPixelSize = createXmlPixelSize(element);
        xmlPixelSize.setRContext(createRContext());
        return (xmlPixelSize);
    }

    /**
     * Creates a <code>XmlAstrometricError</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlAstrometricError
     */
    public XmlAstrometricError createXmlAstrometricErrorWithContext(Element element) {
        XmlAstrometricError xmlAstrometricError = createXmlAstrometricError(element);
        xmlAstrometricError.setRContext(createRContext());
        return (xmlAstrometricError);
    }

    /**
     * Creates a <code>XmlDistortionField</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlDistortionField
     */
    public XmlDistortionField createXmlDistortionFieldWithContext(Element element) {
        XmlDistortionField xmlDistortionField = createXmlDistortionField(element);
        xmlDistortionField.setRContext(createRContext());
        return (xmlDistortionField);
    }

    /**
     * Creates a <code>XmlAstrometry</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlAstrometry
     */
    public XmlAstrometry createXmlAstrometryWithContext(Element element) {
        XmlAstrometry xmlAstrometry = createXmlAstrometry(element);
        xmlAstrometry.setRContext(createRContext());
        return (xmlAstrometry);
    }

    /**
     * Creates a <code>XmlCatalog</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlCatalog
     */
    public XmlCatalog createXmlCatalogWithContext(Element element) {
        XmlCatalog xmlCatalog = createXmlCatalog(element);
        xmlCatalog.setRContext(createRContext());
        return (xmlCatalog);
    }

    /**
     * Creates a <code>XmlPhotometry</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlPhotometry
     */
    public XmlPhotometry createXmlPhotometryWithContext(Element element) {
        XmlPhotometry xmlPhotometry = createXmlPhotometry(element);
        xmlPhotometry.setRContext(createRContext());
        return (xmlPhotometry);
    }

    /**
     * Creates a <code>XmlReversedImage</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlReversedImage
     */
    public XmlReversedImage createXmlReversedImageWithContext(Element element) {
        XmlReversedImage xmlReversedImage = createXmlReversedImage(element);
        xmlReversedImage.setRContext(createRContext());
        return (xmlReversedImage);
    }

    /**
     * Creates a <code>XmlSbigImage</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlSbigImage
     */
    public XmlSbigImage createXmlSbigImageWithContext(Element element) {
        XmlSbigImage xmlSbigImage = createXmlSbigImage(element);
        xmlSbigImage.setRContext(createRContext());
        return (xmlSbigImage);
    }

    /**
     * Creates a <code>XmlUnofficial</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlUnofficial
     */
    public XmlUnofficial createXmlUnofficialWithContext(Element element) {
        XmlUnofficial xmlUnofficial = createXmlUnofficial(element);
        xmlUnofficial.setRContext(createRContext());
        return (xmlUnofficial);
    }

    /**
     * Creates a <code>XmlStarCount</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlStarCount
     */
    public XmlStarCount createXmlStarCountWithContext(Element element) {
        XmlStarCount xmlStarCount = createXmlStarCount(element);
        xmlStarCount.setRContext(createRContext());
        return (xmlStarCount);
    }

    /**
     * Creates a <code>XmlData</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlData
     */
    public XmlData createXmlDataWithContext(Element element) {
        XmlData xmlData = createXmlData(element);
        xmlData.setRContext(createRContext());
        return (xmlData);
    }

    /**
     * Creates a <code>XmlStar</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlStar
     */
    public XmlStar createXmlStarWithContext(Element element) {
        XmlStar xmlStar = createXmlStar(element);
        xmlStar.setRContext(createRContext());
        return (xmlStar);
    }

    /**
     * Creates a <code>XmlRecord</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlRecord
     */
    public XmlRecord createXmlRecordWithContext(Element element) {
        XmlRecord xmlRecord = createXmlRecord(element);
        xmlRecord.setRContext(createRContext());
        return (xmlRecord);
    }

    /**
     * Creates a <code>XmlCoor</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlCoor
     */
    public XmlCoor createXmlCoorWithContext(Element element) {
        XmlCoor xmlCoor = createXmlCoor(element);
        xmlCoor.setRContext(createRContext());
        return (xmlCoor);
    }

    /**
     * Creates a <code>XmlPosition</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlPosition
     */
    public XmlPosition createXmlPositionWithContext(Element element) {
        XmlPosition xmlPosition = createXmlPosition(element);
        xmlPosition.setRContext(createRContext());
        return (xmlPosition);
    }

    /**
     * Creates a <code>XmlItem</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlItem
     */
    public XmlItem createXmlItemWithContext(Element element) {
        XmlItem xmlItem = createXmlItem(element);
        xmlItem.setRContext(createRContext());
        return (xmlItem);
    }

    /**
     * Creates a <code>XmlBatch</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlBatch
     */
    public XmlBatch createXmlBatchWithContext(Element element) {
        XmlBatch xmlBatch = createXmlBatch(element);
        xmlBatch.setRContext(createRContext());
        return (xmlBatch);
    }

    /**
     * Creates a <code>XmlInstruction</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlInstruction
     */
    public XmlInstruction createXmlInstructionWithContext(Element element) {
        XmlInstruction xmlInstruction = createXmlInstruction(element);
        xmlInstruction.setRContext(createRContext());
        return (xmlInstruction);
    }

    /**
     * Creates a <code>XmlBaseCatalog</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlBaseCatalog
     */
    public XmlBaseCatalog createXmlBaseCatalogWithContext(Element element) {
        XmlBaseCatalog xmlBaseCatalog = createXmlBaseCatalog(element);
        xmlBaseCatalog.setRContext(createRContext());
        return (xmlBaseCatalog);
    }

    /**
     * Creates a <code>XmlOutput</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlOutput
     */
    public XmlOutput createXmlOutputWithContext(Element element) {
        XmlOutput xmlOutput = createXmlOutput(element);
        xmlOutput.setRContext(createRContext());
        return (xmlOutput);
    }

    /**
     * Creates a <code>XmlInformationHolder</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlInformationHolder
     */
    public XmlInformationHolder createXmlInformationHolderWithContext(Element element) {
        XmlInformationHolder xmlInformationHolder = createXmlInformationHolder(element);
        xmlInformationHolder.setRContext(createRContext());
        return (xmlInformationHolder);
    }

    /**
     * Creates a <code>XmlRecordHolder</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlRecordHolder
     */
    public XmlRecordHolder createXmlRecordHolderWithContext(Element element) {
        XmlRecordHolder xmlRecordHolder = createXmlRecordHolder(element);
        xmlRecordHolder.setRContext(createRContext());
        return (xmlRecordHolder);
    }

    /**
     * Creates a <code>XmlMagRecordHolder</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlMagRecordHolder
     */
    public XmlMagRecordHolder createXmlMagRecordHolderWithContext(Element element) {
        XmlMagRecordHolder xmlMagRecordHolder = createXmlMagRecordHolder(element);
        xmlMagRecordHolder.setRContext(createRContext());
        return (xmlMagRecordHolder);
    }

    /**
     * Creates a <code>XmlMagRecord</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlMagRecord
     */
    public XmlMagRecord createXmlMagRecordWithContext(Element element) {
        XmlMagRecord xmlMagRecord = createXmlMagRecord(element);
        xmlMagRecord.setRContext(createRContext());
        return (xmlMagRecord);
    }

    /**
     * Creates a <code>XmlMag</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlMag
     */
    public XmlMag createXmlMagWithContext(Element element) {
        XmlMag xmlMag = createXmlMag(element);
        xmlMag.setRContext(createRContext());
        return (xmlMag);
    }

    /**
     * Creates a <code>XmlReported</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlReported
     */
    public XmlReported createXmlReportedWithContext(Element element) {
        XmlReported xmlReported = createXmlReported(element);
        xmlReported.setRContext(createRContext());
        return (xmlReported);
    }

    /**
     * Creates a <code>XmlDiscarded</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlDiscarded
     */
    public XmlDiscarded createXmlDiscardedWithContext(Element element) {
        XmlDiscarded xmlDiscarded = createXmlDiscarded(element);
        xmlDiscarded.setRContext(createRContext());
        return (xmlDiscarded);
    }

    /**
     * Creates a <code>XmlPreempted</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlPreempted
     */
    public XmlPreempted createXmlPreemptedWithContext(Element element) {
        XmlPreempted xmlPreempted = createXmlPreempted(element);
        xmlPreempted.setRContext(createRContext());
        return (xmlPreempted);
    }

    /**
     * Creates a <code>XmlImported</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlImported
     */
    public XmlImported createXmlImportedWithContext(Element element) {
        XmlImported xmlImported = createXmlImported(element);
        xmlImported.setRContext(createRContext());
        return (xmlImported);
    }

    /**
     * Creates a <code>XmlBlending</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlBlending
     */
    public XmlBlending createXmlBlendingWithContext(Element element) {
        XmlBlending xmlBlending = createXmlBlending(element);
        xmlBlending.setRContext(createRContext());
        return (xmlBlending);
    }

    /**
     * Creates a <code>XmlPositionRecordHolder</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlPositionRecordHolder
     */
    public XmlPositionRecordHolder createXmlPositionRecordHolderWithContext(Element element) {
        XmlPositionRecordHolder xmlPositionRecordHolder = createXmlPositionRecordHolder(element);
        xmlPositionRecordHolder.setRContext(createRContext());
        return (xmlPositionRecordHolder);
    }

    /**
     * Creates a <code>XmlPositionRecord</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlPositionRecord
     */
    public XmlPositionRecord createXmlPositionRecordWithContext(Element element) {
        XmlPositionRecord xmlPositionRecord = createXmlPositionRecord(element);
        xmlPositionRecord.setRContext(createRContext());
        return (xmlPositionRecord);
    }

    /**
     * Creates a <code>XmlVariabilityHolder</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlVariabilityHolder
     */
    public XmlVariabilityHolder createXmlVariabilityHolderWithContext(Element element) {
        XmlVariabilityHolder xmlVariabilityHolder = createXmlVariabilityHolder(element);
        xmlVariabilityHolder.setRContext(createRContext());
        return (xmlVariabilityHolder);
    }

    /**
     * Creates a <code>XmlVariability</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlVariability
     */
    public XmlVariability createXmlVariabilityWithContext(Element element) {
        XmlVariability xmlVariability = createXmlVariability(element);
        xmlVariability.setRContext(createRContext());
        return (xmlVariability);
    }

    /**
     * Creates a <code>XmlConfiguration</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlConfiguration
     */
    public XmlConfiguration createXmlConfigurationWithContext(Element element) {
        XmlConfiguration xmlConfiguration = createXmlConfiguration(element);
        xmlConfiguration.setRContext(createRContext());
        return (xmlConfiguration);
    }

    /**
     * Creates a <code>XmlCatalogPath</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlCatalogPath
     */
    public XmlCatalogPath createXmlCatalogPathWithContext(Element element) {
        XmlCatalogPath xmlCatalogPath = createXmlCatalogPath(element);
        xmlCatalogPath.setRContext(createRContext());
        return (xmlCatalogPath);
    }

    /**
     * Creates a <code>XmlImageConfig</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XmlImageConfig
     */
    public XmlImageConfig createXmlImageConfigWithContext(Element element) {
        XmlImageConfig xmlImageConfig = createXmlImageConfig(element);
        xmlImageConfig.setRContext(createRContext());
        return (xmlImageConfig);
    }

    /**
     * Creates a <code>XmlPixy</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlPixy
     */
    public XmlPixy createXmlPixy(RStack stack) {
        XmlPixy xmlPixy = createXmlPixy();
        xmlPixy.setup(stack);
        return (xmlPixy);
    }

    /**
     * Creates a <code>XmlReport</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlReport
     */
    public XmlReport createXmlReport(RStack stack) {
        XmlReport xmlReport = createXmlReport();
        xmlReport.setup(stack);
        return (xmlReport);
    }

    /**
     * Creates a <code>XmlSystem</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlSystem
     */
    public XmlSystem createXmlSystem(RStack stack) {
        XmlSystem xmlSystem = createXmlSystem();
        xmlSystem.setup(stack);
        return (xmlSystem);
    }

    /**
     * Creates a <code>XmlInformation</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlInformation
     */
    public XmlInformation createXmlInformation(RStack stack) {
        XmlInformation xmlInformation = createXmlInformation();
        xmlInformation.setup(stack);
        return (xmlInformation);
    }

    /**
     * Creates a <code>XmlImage</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlImage
     */
    public XmlImage createXmlImage(RStack stack) {
        XmlImage xmlImage = createXmlImage();
        xmlImage.setup(stack);
        return (xmlImage);
    }

    /**
     * Creates a <code>XmlSize</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlSize
     */
    public XmlSize createXmlSize(RStack stack) {
        XmlSize xmlSize = createXmlSize();
        xmlSize.setup(stack);
        return (xmlSize);
    }

    /**
     * Creates a <code>XmlExposure</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlExposure
     */
    public XmlExposure createXmlExposure(RStack stack) {
        XmlExposure xmlExposure = createXmlExposure();
        xmlExposure.setup(stack);
        return (xmlExposure);
    }

    /**
     * Creates a <code>XmlCenter</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlCenter
     */
    public XmlCenter createXmlCenter(RStack stack) {
        XmlCenter xmlCenter = createXmlCenter();
        xmlCenter.setup(stack);
        return (xmlCenter);
    }

    /**
     * Creates a <code>XmlFov</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlFov
     */
    public XmlFov createXmlFov(RStack stack) {
        XmlFov xmlFov = createXmlFov();
        xmlFov.setup(stack);
        return (xmlFov);
    }

    /**
     * Creates a <code>XmlRotation</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlRotation
     */
    public XmlRotation createXmlRotation(RStack stack) {
        XmlRotation xmlRotation = createXmlRotation();
        xmlRotation.setup(stack);
        return (xmlRotation);
    }

    /**
     * Creates a <code>XmlPixelSize</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlPixelSize
     */
    public XmlPixelSize createXmlPixelSize(RStack stack) {
        XmlPixelSize xmlPixelSize = createXmlPixelSize();
        xmlPixelSize.setup(stack);
        return (xmlPixelSize);
    }

    /**
     * Creates a <code>XmlAstrometricError</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlAstrometricError
     */
    public XmlAstrometricError createXmlAstrometricError(RStack stack) {
        XmlAstrometricError xmlAstrometricError = createXmlAstrometricError();
        xmlAstrometricError.setup(stack);
        return (xmlAstrometricError);
    }

    /**
     * Creates a <code>XmlDistortionField</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlDistortionField
     */
    public XmlDistortionField createXmlDistortionField(RStack stack) {
        XmlDistortionField xmlDistortionField = createXmlDistortionField();
        xmlDistortionField.setup(stack);
        return (xmlDistortionField);
    }

    /**
     * Creates a <code>XmlAstrometry</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlAstrometry
     */
    public XmlAstrometry createXmlAstrometry(RStack stack) {
        XmlAstrometry xmlAstrometry = createXmlAstrometry();
        xmlAstrometry.setup(stack);
        return (xmlAstrometry);
    }

    /**
     * Creates a <code>XmlCatalog</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlCatalog
     */
    public XmlCatalog createXmlCatalog(RStack stack) {
        XmlCatalog xmlCatalog = createXmlCatalog();
        xmlCatalog.setup(stack);
        return (xmlCatalog);
    }

    /**
     * Creates a <code>XmlPhotometry</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlPhotometry
     */
    public XmlPhotometry createXmlPhotometry(RStack stack) {
        XmlPhotometry xmlPhotometry = createXmlPhotometry();
        xmlPhotometry.setup(stack);
        return (xmlPhotometry);
    }

    /**
     * Creates a <code>XmlReversedImage</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlReversedImage
     */
    public XmlReversedImage createXmlReversedImage(RStack stack) {
        XmlReversedImage xmlReversedImage = createXmlReversedImage();
        xmlReversedImage.setup(stack);
        return (xmlReversedImage);
    }

    /**
     * Creates a <code>XmlSbigImage</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlSbigImage
     */
    public XmlSbigImage createXmlSbigImage(RStack stack) {
        XmlSbigImage xmlSbigImage = createXmlSbigImage();
        xmlSbigImage.setup(stack);
        return (xmlSbigImage);
    }

    /**
     * Creates a <code>XmlUnofficial</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlUnofficial
     */
    public XmlUnofficial createXmlUnofficial(RStack stack) {
        XmlUnofficial xmlUnofficial = createXmlUnofficial();
        xmlUnofficial.setup(stack);
        return (xmlUnofficial);
    }

    /**
     * Creates a <code>XmlStarCount</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlStarCount
     */
    public XmlStarCount createXmlStarCount(RStack stack) {
        XmlStarCount xmlStarCount = createXmlStarCount();
        xmlStarCount.setup(stack);
        return (xmlStarCount);
    }

    /**
     * Creates a <code>XmlData</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlData
     */
    public XmlData createXmlData(RStack stack) {
        XmlData xmlData = createXmlData();
        xmlData.setup(stack);
        return (xmlData);
    }

    /**
     * Creates a <code>XmlStar</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlStar
     */
    public XmlStar createXmlStar(RStack stack) {
        XmlStar xmlStar = createXmlStar();
        xmlStar.setup(stack);
        return (xmlStar);
    }

    /**
     * Creates a <code>XmlRecord</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlRecord
     */
    public XmlRecord createXmlRecord(RStack stack) {
        XmlRecord xmlRecord = createXmlRecord();
        xmlRecord.setup(stack);
        return (xmlRecord);
    }

    /**
     * Creates a <code>XmlCoor</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlCoor
     */
    public XmlCoor createXmlCoor(RStack stack) {
        XmlCoor xmlCoor = createXmlCoor();
        xmlCoor.setup(stack);
        return (xmlCoor);
    }

    /**
     * Creates a <code>XmlPosition</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlPosition
     */
    public XmlPosition createXmlPosition(RStack stack) {
        XmlPosition xmlPosition = createXmlPosition();
        xmlPosition.setup(stack);
        return (xmlPosition);
    }

    /**
     * Creates a <code>XmlItem</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlItem
     */
    public XmlItem createXmlItem(RStack stack) {
        XmlItem xmlItem = createXmlItem();
        xmlItem.setup(stack);
        return (xmlItem);
    }

    /**
     * Creates a <code>XmlBatch</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlBatch
     */
    public XmlBatch createXmlBatch(RStack stack) {
        XmlBatch xmlBatch = createXmlBatch();
        xmlBatch.setup(stack);
        return (xmlBatch);
    }

    /**
     * Creates a <code>XmlInstruction</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlInstruction
     */
    public XmlInstruction createXmlInstruction(RStack stack) {
        XmlInstruction xmlInstruction = createXmlInstruction();
        xmlInstruction.setup(stack);
        return (xmlInstruction);
    }

    /**
     * Creates a <code>XmlBaseCatalog</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlBaseCatalog
     */
    public XmlBaseCatalog createXmlBaseCatalog(RStack stack) {
        XmlBaseCatalog xmlBaseCatalog = createXmlBaseCatalog();
        xmlBaseCatalog.setup(stack);
        return (xmlBaseCatalog);
    }

    /**
     * Creates a <code>XmlOutput</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlOutput
     */
    public XmlOutput createXmlOutput(RStack stack) {
        XmlOutput xmlOutput = createXmlOutput();
        xmlOutput.setup(stack);
        return (xmlOutput);
    }

    /**
     * Creates a <code>XmlInformationHolder</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlInformationHolder
     */
    public XmlInformationHolder createXmlInformationHolder(RStack stack) {
        XmlInformationHolder xmlInformationHolder = createXmlInformationHolder();
        xmlInformationHolder.setup(stack);
        return (xmlInformationHolder);
    }

    /**
     * Creates a <code>XmlRecordHolder</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlRecordHolder
     */
    public XmlRecordHolder createXmlRecordHolder(RStack stack) {
        XmlRecordHolder xmlRecordHolder = createXmlRecordHolder();
        xmlRecordHolder.setup(stack);
        return (xmlRecordHolder);
    }

    /**
     * Creates a <code>XmlMagRecordHolder</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlMagRecordHolder
     */
    public XmlMagRecordHolder createXmlMagRecordHolder(RStack stack) {
        XmlMagRecordHolder xmlMagRecordHolder = createXmlMagRecordHolder();
        xmlMagRecordHolder.setup(stack);
        return (xmlMagRecordHolder);
    }

    /**
     * Creates a <code>XmlMagRecord</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlMagRecord
     */
    public XmlMagRecord createXmlMagRecord(RStack stack) {
        XmlMagRecord xmlMagRecord = createXmlMagRecord();
        xmlMagRecord.setup(stack);
        return (xmlMagRecord);
    }

    /**
     * Creates a <code>XmlMag</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlMag
     */
    public XmlMag createXmlMag(RStack stack) {
        XmlMag xmlMag = createXmlMag();
        xmlMag.setup(stack);
        return (xmlMag);
    }

    /**
     * Creates a <code>XmlReported</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlReported
     */
    public XmlReported createXmlReported(RStack stack) {
        XmlReported xmlReported = createXmlReported();
        xmlReported.setup(stack);
        return (xmlReported);
    }

    /**
     * Creates a <code>XmlDiscarded</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlDiscarded
     */
    public XmlDiscarded createXmlDiscarded(RStack stack) {
        XmlDiscarded xmlDiscarded = createXmlDiscarded();
        xmlDiscarded.setup(stack);
        return (xmlDiscarded);
    }

    /**
     * Creates a <code>XmlPreempted</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlPreempted
     */
    public XmlPreempted createXmlPreempted(RStack stack) {
        XmlPreempted xmlPreempted = createXmlPreempted();
        xmlPreempted.setup(stack);
        return (xmlPreempted);
    }

    /**
     * Creates a <code>XmlImported</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlImported
     */
    public XmlImported createXmlImported(RStack stack) {
        XmlImported xmlImported = createXmlImported();
        xmlImported.setup(stack);
        return (xmlImported);
    }

    /**
     * Creates a <code>XmlBlending</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlBlending
     */
    public XmlBlending createXmlBlending(RStack stack) {
        XmlBlending xmlBlending = createXmlBlending();
        xmlBlending.setup(stack);
        return (xmlBlending);
    }

    /**
     * Creates a <code>XmlPositionRecordHolder</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlPositionRecordHolder
     */
    public XmlPositionRecordHolder createXmlPositionRecordHolder(RStack stack) {
        XmlPositionRecordHolder xmlPositionRecordHolder = createXmlPositionRecordHolder();
        xmlPositionRecordHolder.setup(stack);
        return (xmlPositionRecordHolder);
    }

    /**
     * Creates a <code>XmlPositionRecord</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlPositionRecord
     */
    public XmlPositionRecord createXmlPositionRecord(RStack stack) {
        XmlPositionRecord xmlPositionRecord = createXmlPositionRecord();
        xmlPositionRecord.setup(stack);
        return (xmlPositionRecord);
    }

    /**
     * Creates a <code>XmlVariabilityHolder</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlVariabilityHolder
     */
    public XmlVariabilityHolder createXmlVariabilityHolder(RStack stack) {
        XmlVariabilityHolder xmlVariabilityHolder = createXmlVariabilityHolder();
        xmlVariabilityHolder.setup(stack);
        return (xmlVariabilityHolder);
    }

    /**
     * Creates a <code>XmlVariability</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlVariability
     */
    public XmlVariability createXmlVariability(RStack stack) {
        XmlVariability xmlVariability = createXmlVariability();
        xmlVariability.setup(stack);
        return (xmlVariability);
    }

    /**
     * Creates a <code>XmlConfiguration</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlConfiguration
     */
    public XmlConfiguration createXmlConfiguration(RStack stack) {
        XmlConfiguration xmlConfiguration = createXmlConfiguration();
        xmlConfiguration.setup(stack);
        return (xmlConfiguration);
    }

    /**
     * Creates a <code>XmlCatalogPath</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlCatalogPath
     */
    public XmlCatalogPath createXmlCatalogPath(RStack stack) {
        XmlCatalogPath xmlCatalogPath = createXmlCatalogPath();
        xmlCatalogPath.setup(stack);
        return (xmlCatalogPath);
    }

    /**
     * Creates a <code>XmlImageConfig</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlImageConfig
     */
    public XmlImageConfig createXmlImageConfig(RStack stack) {
        XmlImageConfig xmlImageConfig = createXmlImageConfig();
        xmlImageConfig.setup(stack);
        return (xmlImageConfig);
    }

    /**
     * Creates a <code>XmlPixy</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlPixy
     */
    public XmlPixy createXmlPixyWithContext(RStack stack) {
        XmlPixy xmlPixy = createXmlPixy(stack);
        xmlPixy.setRContext(createRContext());
        return (xmlPixy);
    }

    /**
     * Creates a <code>XmlReport</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlReport
     */
    public XmlReport createXmlReportWithContext(RStack stack) {
        XmlReport xmlReport = createXmlReport(stack);
        xmlReport.setRContext(createRContext());
        return (xmlReport);
    }

    /**
     * Creates a <code>XmlSystem</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlSystem
     */
    public XmlSystem createXmlSystemWithContext(RStack stack) {
        XmlSystem xmlSystem = createXmlSystem(stack);
        xmlSystem.setRContext(createRContext());
        return (xmlSystem);
    }

    /**
     * Creates a <code>XmlInformation</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlInformation
     */
    public XmlInformation createXmlInformationWithContext(RStack stack) {
        XmlInformation xmlInformation = createXmlInformation(stack);
        xmlInformation.setRContext(createRContext());
        return (xmlInformation);
    }

    /**
     * Creates a <code>XmlImage</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlImage
     */
    public XmlImage createXmlImageWithContext(RStack stack) {
        XmlImage xmlImage = createXmlImage(stack);
        xmlImage.setRContext(createRContext());
        return (xmlImage);
    }

    /**
     * Creates a <code>XmlSize</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlSize
     */
    public XmlSize createXmlSizeWithContext(RStack stack) {
        XmlSize xmlSize = createXmlSize(stack);
        xmlSize.setRContext(createRContext());
        return (xmlSize);
    }

    /**
     * Creates a <code>XmlExposure</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlExposure
     */
    public XmlExposure createXmlExposureWithContext(RStack stack) {
        XmlExposure xmlExposure = createXmlExposure(stack);
        xmlExposure.setRContext(createRContext());
        return (xmlExposure);
    }

    /**
     * Creates a <code>XmlCenter</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlCenter
     */
    public XmlCenter createXmlCenterWithContext(RStack stack) {
        XmlCenter xmlCenter = createXmlCenter(stack);
        xmlCenter.setRContext(createRContext());
        return (xmlCenter);
    }

    /**
     * Creates a <code>XmlFov</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlFov
     */
    public XmlFov createXmlFovWithContext(RStack stack) {
        XmlFov xmlFov = createXmlFov(stack);
        xmlFov.setRContext(createRContext());
        return (xmlFov);
    }

    /**
     * Creates a <code>XmlRotation</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlRotation
     */
    public XmlRotation createXmlRotationWithContext(RStack stack) {
        XmlRotation xmlRotation = createXmlRotation(stack);
        xmlRotation.setRContext(createRContext());
        return (xmlRotation);
    }

    /**
     * Creates a <code>XmlPixelSize</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlPixelSize
     */
    public XmlPixelSize createXmlPixelSizeWithContext(RStack stack) {
        XmlPixelSize xmlPixelSize = createXmlPixelSize(stack);
        xmlPixelSize.setRContext(createRContext());
        return (xmlPixelSize);
    }

    /**
     * Creates a <code>XmlAstrometricError</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlAstrometricError
     */
    public XmlAstrometricError createXmlAstrometricErrorWithContext(RStack stack) {
        XmlAstrometricError xmlAstrometricError = createXmlAstrometricError(stack);
        xmlAstrometricError.setRContext(createRContext());
        return (xmlAstrometricError);
    }

    /**
     * Creates a <code>XmlDistortionField</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlDistortionField
     */
    public XmlDistortionField createXmlDistortionFieldWithContext(RStack stack) {
        XmlDistortionField xmlDistortionField = createXmlDistortionField(stack);
        xmlDistortionField.setRContext(createRContext());
        return (xmlDistortionField);
    }

    /**
     * Creates a <code>XmlAstrometry</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlAstrometry
     */
    public XmlAstrometry createXmlAstrometryWithContext(RStack stack) {
        XmlAstrometry xmlAstrometry = createXmlAstrometry(stack);
        xmlAstrometry.setRContext(createRContext());
        return (xmlAstrometry);
    }

    /**
     * Creates a <code>XmlCatalog</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlCatalog
     */
    public XmlCatalog createXmlCatalogWithContext(RStack stack) {
        XmlCatalog xmlCatalog = createXmlCatalog(stack);
        xmlCatalog.setRContext(createRContext());
        return (xmlCatalog);
    }

    /**
     * Creates a <code>XmlPhotometry</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlPhotometry
     */
    public XmlPhotometry createXmlPhotometryWithContext(RStack stack) {
        XmlPhotometry xmlPhotometry = createXmlPhotometry(stack);
        xmlPhotometry.setRContext(createRContext());
        return (xmlPhotometry);
    }

    /**
     * Creates a <code>XmlReversedImage</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlReversedImage
     */
    public XmlReversedImage createXmlReversedImageWithContext(RStack stack) {
        XmlReversedImage xmlReversedImage = createXmlReversedImage(stack);
        xmlReversedImage.setRContext(createRContext());
        return (xmlReversedImage);
    }

    /**
     * Creates a <code>XmlSbigImage</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlSbigImage
     */
    public XmlSbigImage createXmlSbigImageWithContext(RStack stack) {
        XmlSbigImage xmlSbigImage = createXmlSbigImage(stack);
        xmlSbigImage.setRContext(createRContext());
        return (xmlSbigImage);
    }

    /**
     * Creates a <code>XmlUnofficial</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlUnofficial
     */
    public XmlUnofficial createXmlUnofficialWithContext(RStack stack) {
        XmlUnofficial xmlUnofficial = createXmlUnofficial(stack);
        xmlUnofficial.setRContext(createRContext());
        return (xmlUnofficial);
    }

    /**
     * Creates a <code>XmlStarCount</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlStarCount
     */
    public XmlStarCount createXmlStarCountWithContext(RStack stack) {
        XmlStarCount xmlStarCount = createXmlStarCount(stack);
        xmlStarCount.setRContext(createRContext());
        return (xmlStarCount);
    }

    /**
     * Creates a <code>XmlData</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlData
     */
    public XmlData createXmlDataWithContext(RStack stack) {
        XmlData xmlData = createXmlData(stack);
        xmlData.setRContext(createRContext());
        return (xmlData);
    }

    /**
     * Creates a <code>XmlStar</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlStar
     */
    public XmlStar createXmlStarWithContext(RStack stack) {
        XmlStar xmlStar = createXmlStar(stack);
        xmlStar.setRContext(createRContext());
        return (xmlStar);
    }

    /**
     * Creates a <code>XmlRecord</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlRecord
     */
    public XmlRecord createXmlRecordWithContext(RStack stack) {
        XmlRecord xmlRecord = createXmlRecord(stack);
        xmlRecord.setRContext(createRContext());
        return (xmlRecord);
    }

    /**
     * Creates a <code>XmlCoor</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlCoor
     */
    public XmlCoor createXmlCoorWithContext(RStack stack) {
        XmlCoor xmlCoor = createXmlCoor(stack);
        xmlCoor.setRContext(createRContext());
        return (xmlCoor);
    }

    /**
     * Creates a <code>XmlPosition</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlPosition
     */
    public XmlPosition createXmlPositionWithContext(RStack stack) {
        XmlPosition xmlPosition = createXmlPosition(stack);
        xmlPosition.setRContext(createRContext());
        return (xmlPosition);
    }

    /**
     * Creates a <code>XmlItem</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlItem
     */
    public XmlItem createXmlItemWithContext(RStack stack) {
        XmlItem xmlItem = createXmlItem(stack);
        xmlItem.setRContext(createRContext());
        return (xmlItem);
    }

    /**
     * Creates a <code>XmlBatch</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlBatch
     */
    public XmlBatch createXmlBatchWithContext(RStack stack) {
        XmlBatch xmlBatch = createXmlBatch(stack);
        xmlBatch.setRContext(createRContext());
        return (xmlBatch);
    }

    /**
     * Creates a <code>XmlInstruction</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlInstruction
     */
    public XmlInstruction createXmlInstructionWithContext(RStack stack) {
        XmlInstruction xmlInstruction = createXmlInstruction(stack);
        xmlInstruction.setRContext(createRContext());
        return (xmlInstruction);
    }

    /**
     * Creates a <code>XmlBaseCatalog</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlBaseCatalog
     */
    public XmlBaseCatalog createXmlBaseCatalogWithContext(RStack stack) {
        XmlBaseCatalog xmlBaseCatalog = createXmlBaseCatalog(stack);
        xmlBaseCatalog.setRContext(createRContext());
        return (xmlBaseCatalog);
    }

    /**
     * Creates a <code>XmlOutput</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlOutput
     */
    public XmlOutput createXmlOutputWithContext(RStack stack) {
        XmlOutput xmlOutput = createXmlOutput(stack);
        xmlOutput.setRContext(createRContext());
        return (xmlOutput);
    }

    /**
     * Creates a <code>XmlInformationHolder</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlInformationHolder
     */
    public XmlInformationHolder createXmlInformationHolderWithContext(RStack stack) {
        XmlInformationHolder xmlInformationHolder = createXmlInformationHolder(stack);
        xmlInformationHolder.setRContext(createRContext());
        return (xmlInformationHolder);
    }

    /**
     * Creates a <code>XmlRecordHolder</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlRecordHolder
     */
    public XmlRecordHolder createXmlRecordHolderWithContext(RStack stack) {
        XmlRecordHolder xmlRecordHolder = createXmlRecordHolder(stack);
        xmlRecordHolder.setRContext(createRContext());
        return (xmlRecordHolder);
    }

    /**
     * Creates a <code>XmlMagRecordHolder</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlMagRecordHolder
     */
    public XmlMagRecordHolder createXmlMagRecordHolderWithContext(RStack stack) {
        XmlMagRecordHolder xmlMagRecordHolder = createXmlMagRecordHolder(stack);
        xmlMagRecordHolder.setRContext(createRContext());
        return (xmlMagRecordHolder);
    }

    /**
     * Creates a <code>XmlMagRecord</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlMagRecord
     */
    public XmlMagRecord createXmlMagRecordWithContext(RStack stack) {
        XmlMagRecord xmlMagRecord = createXmlMagRecord(stack);
        xmlMagRecord.setRContext(createRContext());
        return (xmlMagRecord);
    }

    /**
     * Creates a <code>XmlMag</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlMag
     */
    public XmlMag createXmlMagWithContext(RStack stack) {
        XmlMag xmlMag = createXmlMag(stack);
        xmlMag.setRContext(createRContext());
        return (xmlMag);
    }

    /**
     * Creates a <code>XmlReported</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlReported
     */
    public XmlReported createXmlReportedWithContext(RStack stack) {
        XmlReported xmlReported = createXmlReported(stack);
        xmlReported.setRContext(createRContext());
        return (xmlReported);
    }

    /**
     * Creates a <code>XmlDiscarded</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlDiscarded
     */
    public XmlDiscarded createXmlDiscardedWithContext(RStack stack) {
        XmlDiscarded xmlDiscarded = createXmlDiscarded(stack);
        xmlDiscarded.setRContext(createRContext());
        return (xmlDiscarded);
    }

    /**
     * Creates a <code>XmlPreempted</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlPreempted
     */
    public XmlPreempted createXmlPreemptedWithContext(RStack stack) {
        XmlPreempted xmlPreempted = createXmlPreempted(stack);
        xmlPreempted.setRContext(createRContext());
        return (xmlPreempted);
    }

    /**
     * Creates a <code>XmlImported</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlImported
     */
    public XmlImported createXmlImportedWithContext(RStack stack) {
        XmlImported xmlImported = createXmlImported(stack);
        xmlImported.setRContext(createRContext());
        return (xmlImported);
    }

    /**
     * Creates a <code>XmlBlending</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlBlending
     */
    public XmlBlending createXmlBlendingWithContext(RStack stack) {
        XmlBlending xmlBlending = createXmlBlending(stack);
        xmlBlending.setRContext(createRContext());
        return (xmlBlending);
    }

    /**
     * Creates a <code>XmlPositionRecordHolder</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlPositionRecordHolder
     */
    public XmlPositionRecordHolder createXmlPositionRecordHolderWithContext(RStack stack) {
        XmlPositionRecordHolder xmlPositionRecordHolder = createXmlPositionRecordHolder(stack);
        xmlPositionRecordHolder.setRContext(createRContext());
        return (xmlPositionRecordHolder);
    }

    /**
     * Creates a <code>XmlPositionRecord</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlPositionRecord
     */
    public XmlPositionRecord createXmlPositionRecordWithContext(RStack stack) {
        XmlPositionRecord xmlPositionRecord = createXmlPositionRecord(stack);
        xmlPositionRecord.setRContext(createRContext());
        return (xmlPositionRecord);
    }

    /**
     * Creates a <code>XmlVariabilityHolder</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlVariabilityHolder
     */
    public XmlVariabilityHolder createXmlVariabilityHolderWithContext(RStack stack) {
        XmlVariabilityHolder xmlVariabilityHolder = createXmlVariabilityHolder(stack);
        xmlVariabilityHolder.setRContext(createRContext());
        return (xmlVariabilityHolder);
    }

    /**
     * Creates a <code>XmlVariability</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlVariability
     */
    public XmlVariability createXmlVariabilityWithContext(RStack stack) {
        XmlVariability xmlVariability = createXmlVariability(stack);
        xmlVariability.setRContext(createRContext());
        return (xmlVariability);
    }

    /**
     * Creates a <code>XmlConfiguration</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlConfiguration
     */
    public XmlConfiguration createXmlConfigurationWithContext(RStack stack) {
        XmlConfiguration xmlConfiguration = createXmlConfiguration(stack);
        xmlConfiguration.setRContext(createRContext());
        return (xmlConfiguration);
    }

    /**
     * Creates a <code>XmlCatalogPath</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlCatalogPath
     */
    public XmlCatalogPath createXmlCatalogPathWithContext(RStack stack) {
        XmlCatalogPath xmlCatalogPath = createXmlCatalogPath(stack);
        xmlCatalogPath.setRContext(createRContext());
        return (xmlCatalogPath);
    }

    /**
     * Creates a <code>XmlImageConfig</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XmlImageConfig
     */
    public XmlImageConfig createXmlImageConfigWithContext(RStack stack) {
        XmlImageConfig xmlImageConfig = createXmlImageConfig(stack);
        xmlImageConfig.setRContext(createRContext());
        return (xmlImageConfig);
    }
}
