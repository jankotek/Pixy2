package net.aerith.misao.xml.relaxer;

import org.w3c.dom.*;

/**
 * <b>XmlPositionRecord</b> is generated by Relaxer based on pixy.rlx.
 * This class is derived from:
 * 
 * <!-- for programmer
 * <elementRule role="position-record">
 *   <sequence>
 *     <ref label="date"/>
 *     <ref label="coor"/>
 *     <ref label="mag"/>
 *     <element name="area" occurs="?" type="int"/>
 *     <ref label="pixel-size" occurs="?"/>
 *     <ref label="astrometric-error" occurs="?"/>
 *     <element name="catalog" occurs="?" type="string"/>
 *     <element name="equinox" occurs="?" type="string"/>
 *     <element name="observer" type="string"/>
 *     <element name="instruments" occurs="?" type="string"/>
 *     <element name="image-xml-path" type="string"/>
 *     <element name="name" type="string"/>
 *     <ref label="position"/>
 *     <element name="pixels-from-edge" occurs="?" type="int"/>
 *   </sequence>
 * </elementRule>
 * 
 * <tag name="position-record"/>
 * -->
 * <!-- for javadoc -->
 * <pre> &lt;elementRule role="position-record"&gt;
 *   &lt;sequence&gt;
 *     &lt;ref label="date"/&gt;
 *     &lt;ref label="coor"/&gt;
 *     &lt;ref label="mag"/&gt;
 *     &lt;element name="area" occurs="?" type="int"/&gt;
 *     &lt;ref label="pixel-size" occurs="?"/&gt;
 *     &lt;ref label="astrometric-error" occurs="?"/&gt;
 *     &lt;element name="catalog" occurs="?" type="string"/&gt;
 *     &lt;element name="equinox" occurs="?" type="string"/&gt;
 *     &lt;element name="observer" type="string"/&gt;
 *     &lt;element name="instruments" occurs="?" type="string"/&gt;
 *     &lt;element name="image-xml-path" type="string"/&gt;
 *     &lt;element name="name" type="string"/&gt;
 *     &lt;ref label="position"/&gt;
 *     &lt;element name="pixels-from-edge" occurs="?" type="int"/&gt;
 *   &lt;/sequence&gt;
 * &lt;/elementRule&gt;
 * &lt;tag name="position-record"/&gt;
 * </pre>
 *
 * @version pixy.rlx (Tue Nov 23 20:34:01 JST 2004)
 * @author  Relaxer 0.10.1 (by ASAMI@Yokohama)
 */
public class XmlPositionRecord extends net.aerith.misao.xml.IONode implements java.io.Serializable, IRNode {
    private String date;
    private XmlCoor coor;
    private XmlMag mag;
    private Integer area;
    private XmlPixelSize pixelSize;
    private XmlAstrometricError astrometricError;
    private String catalog;
    private String equinox;
    private String observer;
    private String instruments;
    private String imageXmlPath;
    private String name;
    private XmlPosition position;
    private Integer pixelsFromEdge;
    private IRNode parentRNode;
    private RContext rContext;

    /**
     * Creates a <code>XmlPositionRecord</code>.
     *
     */
    public XmlPositionRecord() {
    }

    /**
     * Creates a <code>XmlPositionRecord</code> by the Stack <code>stack</code>
     * that contains Elements.
     * This constructor is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     */
    public XmlPositionRecord(RStack stack) {
        setup(stack);
    }

    /**
     * Creates a <code>XmlPositionRecord</code> by the Document <code>doc</code>.
     *
     * @param doc
     */
    public XmlPositionRecord(Document doc) {
        setup(doc.getDocumentElement());
    }

    /**
     * Creates a <code>XmlPositionRecord</code> by the Element <code>element</code>.
     *
     * @param element
     */
    public XmlPositionRecord(Element element) {
        setup(element);
    }

    /**
     * Initializes the <code>XmlPositionRecord</code> by the Document <code>doc</code>.
     *
     * @param doc
     */
    public void setup(Document doc) {
        setup(doc.getDocumentElement());
    }

    /**
     * Initializes the <code>XmlPositionRecord</code> by the Element <code>element</code>.
     *
     * @param element
     */
    public void setup(Element element) {
        init(element);
    }

    /**
     * Initializes the <code>XmlPositionRecord</code> by the Stack <code>stack</code>
     * that contains Elements.
     * This constructor is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     */
    public void setup(RStack stack) {
        setup(stack.popElement());
    }

    /**
     * @param element
     */
    private void init(Element element) {
        IPixyFactory factory = PixyFactory.getFactory();
        RStack stack = new RStack(element);
        date = URelaxer.getElementPropertyAsString(stack.popElement());
        setCoor(factory.createXmlCoor(stack));
        setMag(factory.createXmlMag(stack));
        area = URelaxer.getElementPropertyAsIntByStack(stack, "area");
        if (XmlPixelSize.isMatch(stack)) {
            setPixelSize(factory.createXmlPixelSize(stack));
        }
        if (XmlAstrometricError.isMatch(stack)) {
            setAstrometricError(factory.createXmlAstrometricError(stack));
        }
        catalog = URelaxer.getElementPropertyAsStringByStack(stack, "catalog");
        equinox = URelaxer.getElementPropertyAsStringByStack(stack, "equinox");
        observer = URelaxer.getElementPropertyAsString(stack.popElement());
        instruments = URelaxer.getElementPropertyAsStringByStack(stack, "instruments");
        imageXmlPath = URelaxer.getElementPropertyAsString(stack.popElement());
        name = URelaxer.getElementPropertyAsString(stack.popElement());
        setPosition(factory.createXmlPosition(stack));
        pixelsFromEdge = URelaxer.getElementPropertyAsIntByStack(stack, "pixels-from-edge");
    }

    /**
     * Creates a DOM representation of the object.
     * Result is appended to the Node <code>parent</code>.
     *
     * @param parent
     */
    public void makeElement(Node parent) {
        Document doc;
        if (parent instanceof Document) {
            doc = (Document)parent;
        } else {
            doc = parent.getOwnerDocument();
        }
        Element element = doc.createElement("position-record");
        int size;
        URelaxer.setElementPropertyByString(element, "date", date);
        coor.makeElement(element);
        mag.makeElement(element);
        if (area != null) {
            URelaxer.setElementPropertyByInt(element, "area", area);
        }
        if (pixelSize != null) {
            pixelSize.makeElement(element);
        }
        if (astrometricError != null) {
            astrometricError.makeElement(element);
        }
        if (catalog != null) {
            URelaxer.setElementPropertyByString(element, "catalog", catalog);
        }
        if (equinox != null) {
            URelaxer.setElementPropertyByString(element, "equinox", equinox);
        }
        URelaxer.setElementPropertyByString(element, "observer", observer);
        if (instruments != null) {
            URelaxer.setElementPropertyByString(element, "instruments", instruments);
        }
        URelaxer.setElementPropertyByString(element, "image-xml-path", imageXmlPath);
        URelaxer.setElementPropertyByString(element, "name", name);
        position.makeElement(element);
        if (pixelsFromEdge != null) {
            URelaxer.setElementPropertyByInt(element, "pixels-from-edge", pixelsFromEdge);
        }
        parent.appendChild(element);
    }

    /**
     * Gets the String property <b>date</b>.
     *
     * @return String
     */
    public final String getDate() {
        return (date);
    }

    /**
     * Sets the String property <b>date</b>.
     *
     * @param date
     */
    public final void setDate(String date) {
        this.date = date;
    }

    /**
     * Gets the XmlCoor property <b>coor</b>.
     *
     * @return XmlCoor
     */
    public final XmlCoor getCoor() {
        return (coor);
    }

    /**
     * Sets the XmlCoor property <b>coor</b>.
     *
     * @param coor
     */
    public final void setCoor(XmlCoor coor) {
        this.coor = coor;
        coor.setParentRNode(this);
    }

    /**
     * Gets the XmlMag property <b>mag</b>.
     *
     * @return XmlMag
     */
    public final XmlMag getMag() {
        return (mag);
    }

    /**
     * Sets the XmlMag property <b>mag</b>.
     *
     * @param mag
     */
    public final void setMag(XmlMag mag) {
        this.mag = mag;
        mag.setParentRNode(this);
    }

    /**
     * Gets the Integer property <b>area</b>.
     *
     * @return Integer
     */
    public final Integer getArea() {
        return (area);
    }

    /**
     * Sets the Integer property <b>area</b>.
     *
     * @param area
     */
    public final void setArea(Integer area) {
        this.area = area;
    }

    /**
     * Gets the XmlPixelSize property <b>pixelSize</b>.
     *
     * @return XmlPixelSize
     */
    public final XmlPixelSize getPixelSize() {
        return (pixelSize);
    }

    /**
     * Sets the XmlPixelSize property <b>pixelSize</b>.
     *
     * @param pixelSize
     */
    public final void setPixelSize(XmlPixelSize pixelSize) {
        this.pixelSize = pixelSize;
        pixelSize.setParentRNode(this);
    }

    /**
     * Gets the XmlAstrometricError property <b>astrometricError</b>.
     *
     * @return XmlAstrometricError
     */
    public final XmlAstrometricError getAstrometricError() {
        return (astrometricError);
    }

    /**
     * Sets the XmlAstrometricError property <b>astrometricError</b>.
     *
     * @param astrometricError
     */
    public final void setAstrometricError(XmlAstrometricError astrometricError) {
        this.astrometricError = astrometricError;
        astrometricError.setParentRNode(this);
    }

    /**
     * Gets the String property <b>catalog</b>.
     *
     * @return String
     */
    public final String getCatalog() {
        return (catalog);
    }

    /**
     * Sets the String property <b>catalog</b>.
     *
     * @param catalog
     */
    public final void setCatalog(String catalog) {
        this.catalog = catalog;
    }

    /**
     * Gets the String property <b>equinox</b>.
     *
     * @return String
     */
    public final String getEquinox() {
        return (equinox);
    }

    /**
     * Sets the String property <b>equinox</b>.
     *
     * @param equinox
     */
    public final void setEquinox(String equinox) {
        this.equinox = equinox;
    }

    /**
     * Gets the String property <b>observer</b>.
     *
     * @return String
     */
    public final String getObserver() {
        return (observer);
    }

    /**
     * Sets the String property <b>observer</b>.
     *
     * @param observer
     */
    public final void setObserver(String observer) {
        this.observer = observer;
    }

    /**
     * Gets the String property <b>instruments</b>.
     *
     * @return String
     */
    public final String getInstruments() {
        return (instruments);
    }

    /**
     * Sets the String property <b>instruments</b>.
     *
     * @param instruments
     */
    public final void setInstruments(String instruments) {
        this.instruments = instruments;
    }

    /**
     * Gets the String property <b>imageXmlPath</b>.
     *
     * @return String
     */
    public final String getImageXmlPath() {
        return (imageXmlPath);
    }

    /**
     * Sets the String property <b>imageXmlPath</b>.
     *
     * @param imageXmlPath
     */
    public final void setImageXmlPath(String imageXmlPath) {
        this.imageXmlPath = imageXmlPath;
    }

    /**
     * Gets the String property <b>name</b>.
     *
     * @return String
     */
    public final String getName() {
        return (name);
    }

    /**
     * Sets the String property <b>name</b>.
     *
     * @param name
     */
    public final void setName(String name) {
        this.name = name;
    }

    /**
     * Gets the XmlPosition property <b>position</b>.
     *
     * @return XmlPosition
     */
    public final XmlPosition getPosition() {
        return (position);
    }

    /**
     * Sets the XmlPosition property <b>position</b>.
     *
     * @param position
     */
    public final void setPosition(XmlPosition position) {
        this.position = position;
        position.setParentRNode(this);
    }

    /**
     * Gets the Integer property <b>pixelsFromEdge</b>.
     *
     * @return Integer
     */
    public final Integer getPixelsFromEdge() {
        return (pixelsFromEdge);
    }

    /**
     * Sets the Integer property <b>pixelsFromEdge</b>.
     *
     * @param pixelsFromEdge
     */
    public final void setPixelsFromEdge(Integer pixelsFromEdge) {
        this.pixelsFromEdge = pixelsFromEdge;
    }

    /**
     * Gets the IRNode property <b>parentRNode</b>.
     *
     * @return IRNode
     */
    public final IRNode getParentRNode() {
        return (parentRNode);
    }

    /**
     * Sets the IRNode property <b>parentRNode</b>.
     *
     * @param parentRNode
     */
    public final void setParentRNode(IRNode parentRNode) {
        this.parentRNode = parentRNode;
    }

    /**
     * Gets child RNodes.
     *
     * @return IRNode[]
     */
    public IRNode[] getRNodes() {
        java.util.List classNodes = new java.util.ArrayList();
        classNodes.add(coor);
        classNodes.add(mag);
        if (pixelSize != null) {
            classNodes.add(pixelSize);
        }
        if (astrometricError != null) {
            classNodes.add(astrometricError);
        }
        classNodes.add(position);
        IRNode[] nodes = new IRNode[classNodes.size()];
        return ((IRNode[])classNodes.toArray(nodes));
    }

    /**
     * Gets the RContext property <b>rContext</b>.
     *
     * @return RContext
     */
    public final RContext getRContext() {
        return (rContext);
    }

    /**
     * Sets the RContext property <b>rContext</b>.
     *
     * @param rContext
     */
    public final void setRContext(RContext rContext) {
        this.rContext = rContext;
        IRNode[] contextRNodes = getRNodes();
        for (int i = 0;i < contextRNodes.length;i++) {
            contextRNodes[i].setRContext(rContext);
        }
    }

    /**
     * Gets the property "rContext" which is resolved recursively.
     *
     * @return RContext
     */
    public RContext getRContextResolved() {
        if (rContext != null) {
            return (rContext);
        }
        if (parentRNode == null) {
            return (null);
        }
        return (parentRNode.getRContextResolved());
    }

    /**
     * Tests if a Element <code>element</code> is valid
     * for the <code>XmlPositionRecord</code>.
     *
     * @param element
     * @return boolean
     */
    public static boolean isMatch(Element element) {
        String tagName = element.getTagName();
        if (!"position-record".equals(tagName)) {
            return (false);
        }
        RStack target = new RStack(element);
        Element child;
        child = target.popElement();
        if (child == null) {
            return (false);
        }
        if (!"date".equals(child.getTagName())) {
            return (false);
        }
        if (!XmlCoor.isMatchHungry(target)) {
            return (false);
        }
        if (!XmlMag.isMatchHungry(target)) {
            return (false);
        }
        child = target.peekElement();
        if (child != null) {
            if ("area".equals(child.getTagName())) {
                target.popElement();
            }
        }
        if (XmlPixelSize.isMatchHungry(target)) {
        }
        if (XmlAstrometricError.isMatchHungry(target)) {
        }
        child = target.peekElement();
        if (child != null) {
            if ("catalog".equals(child.getTagName())) {
                target.popElement();
            }
        }
        child = target.peekElement();
        if (child != null) {
            if ("equinox".equals(child.getTagName())) {
                target.popElement();
            }
        }
        child = target.popElement();
        if (child == null) {
            return (false);
        }
        if (!"observer".equals(child.getTagName())) {
            return (false);
        }
        child = target.peekElement();
        if (child != null) {
            if ("instruments".equals(child.getTagName())) {
                target.popElement();
            }
        }
        child = target.popElement();
        if (child == null) {
            return (false);
        }
        if (!"image-xml-path".equals(child.getTagName())) {
            return (false);
        }
        child = target.popElement();
        if (child == null) {
            return (false);
        }
        if (!"name".equals(child.getTagName())) {
            return (false);
        }
        if (!XmlPosition.isMatchHungry(target)) {
            return (false);
        }
        child = target.peekElement();
        if (child != null) {
            if ("pixels-from-edge".equals(child.getTagName())) {
                target.popElement();
            }
        }
        if (!target.isEmptyElement()) {
            return (false);
        }
        return (true);
    }

    /**
     * Tests if elements contained in a Stack <code>stack</code>
     * is valid for the <code>XmlPositionRecord</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return boolean
     */
    public static boolean isMatch(RStack stack) {
        Element element = stack.peekElement();
        if (element == null) {
            return (false);
        }
        return (isMatch(element));
    }

    /**
     * Tests if elements contained in a Stack <code>stack</code>
     * is valid for the <code>XmlPositionRecord</code>.
     * This method consumes the stack contents during matching operation.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return boolean
     */
    public static boolean isMatchHungry(RStack stack) {
        Element element = stack.peekElement();
        if (element == null) {
            return (false);
        }
        if (isMatch(element)) {
            stack.popElement();
            return (true);
        } else {
            return (false);
        }
    }
}
