package net.aerith.misao.xml.relaxer;

import org.w3c.dom.*;

/**
 * <b>XmlConfiguration</b> is generated by Relaxer based on pixy.rlx.
 * This class is derived from:
 * 
 * <!-- for programmer
 * <elementRule role="configuration">
 *   <sequence>
 *     <ref label="catalog-path" occurs="*"/>
 *     <ref label="image-config" occurs="?"/>
 *   </sequence>
 * </elementRule>
 * 
 * <tag name="configuration"/>
 * -->
 * <!-- for javadoc -->
 * <pre> &lt;elementRule role="configuration"&gt;
 *   &lt;sequence&gt;
 *     &lt;ref label="catalog-path" occurs="*"/&gt;
 *     &lt;ref label="image-config" occurs="?"/&gt;
 *   &lt;/sequence&gt;
 * &lt;/elementRule&gt;
 * &lt;tag name="configuration"/&gt;
 * </pre>
 *
 * @version pixy.rlx (Tue Nov 23 20:34:01 JST 2004)
 * @author  Relaxer 0.10.1 (by ASAMI@Yokohama)
 */
public class XmlConfiguration extends net.aerith.misao.xml.IONode implements java.io.Serializable, IRNode {
    // List<XmlCatalogPath>
    private java.util.List catalogPath = new java.util.ArrayList();
    private XmlImageConfig imageConfig;
    private IRNode parentRNode;
    private RContext rContext;

    /**
     * Creates a <code>XmlConfiguration</code>.
     *
     */
    public XmlConfiguration() {
    }

    /**
     * Creates a <code>XmlConfiguration</code> by the Stack <code>stack</code>
     * that contains Elements.
     * This constructor is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     */
    public XmlConfiguration(RStack stack) {
        setup(stack);
    }

    /**
     * Creates a <code>XmlConfiguration</code> by the Document <code>doc</code>.
     *
     * @param doc
     */
    public XmlConfiguration(Document doc) {
        setup(doc.getDocumentElement());
    }

    /**
     * Creates a <code>XmlConfiguration</code> by the Element <code>element</code>.
     *
     * @param element
     */
    public XmlConfiguration(Element element) {
        setup(element);
    }

    /**
     * Initializes the <code>XmlConfiguration</code> by the Document <code>doc</code>.
     *
     * @param doc
     */
    public void setup(Document doc) {
        setup(doc.getDocumentElement());
    }

    /**
     * Initializes the <code>XmlConfiguration</code> by the Element <code>element</code>.
     *
     * @param element
     */
    public void setup(Element element) {
        init(element);
    }

    /**
     * Initializes the <code>XmlConfiguration</code> by the Stack <code>stack</code>
     * that contains Elements.
     * This constructor is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     */
    public void setup(RStack stack) {
        setup(stack.popElement());
    }

    /**
     * @param element
     */
    private void init(Element element) {
        IPixyFactory factory = PixyFactory.getFactory();
        RStack stack = new RStack(element);
        catalogPath.clear();
        while (!stack.isEmptyElement()) {
            if (XmlCatalogPath.isMatch(stack)) {
                addCatalogPath(factory.createXmlCatalogPath(stack));
            } else {
                break;
            }
        }
        if (XmlImageConfig.isMatch(stack)) {
            setImageConfig(factory.createXmlImageConfig(stack));
        }
    }

    /**
     * Creates a DOM representation of the object.
     * Result is appended to the Node <code>parent</code>.
     *
     * @param parent
     */
    public void makeElement(Node parent) {
        Document doc;
        if (parent instanceof Document) {
            doc = (Document)parent;
        } else {
            doc = parent.getOwnerDocument();
        }
        Element element = doc.createElement("configuration");
        int size;
        size = catalogPath.size();
        for (int i = 0;i < size;i++) {
            XmlCatalogPath value = (XmlCatalogPath)this.catalogPath.get(i);
            value.makeElement(element);
        }
        if (imageConfig != null) {
            imageConfig.makeElement(element);
        }
        parent.appendChild(element);
    }

    /**
     * Gets the XmlCatalogPath property <b>catalogPath</b>.
     *
     * @return XmlCatalogPath[]
     */
    public final XmlCatalogPath[] getCatalogPath() {
        IPixyFactory factory = PixyFactory.getFactory();
        XmlCatalogPath[] array = factory.createArrayXmlCatalogPath(catalogPath.size());
        return ((XmlCatalogPath[])catalogPath.toArray(array));
    }

    /**
     * Sets the XmlCatalogPath property <b>catalogPath</b>.
     *
     * @param catalogPath
     */
    public final void setCatalogPath(XmlCatalogPath[] catalogPath) {
        this.catalogPath.clear();
        this.catalogPath.addAll(java.util.Arrays.asList(catalogPath));
        for (int i = 0;i < catalogPath.length;i++) {
            catalogPath[i].setParentRNode(this);
        }
    }

    /**
     * Adds the XmlCatalogPath property <b>catalogPath</b>.
     *
     * @param catalogPath
     */
    public final void addCatalogPath(XmlCatalogPath catalogPath) {
        this.catalogPath.add(catalogPath);
        catalogPath.setParentRNode(this);
    }

    /**
     * Gets the XmlImageConfig property <b>imageConfig</b>.
     *
     * @return XmlImageConfig
     */
    public final XmlImageConfig getImageConfig() {
        return (imageConfig);
    }

    /**
     * Sets the XmlImageConfig property <b>imageConfig</b>.
     *
     * @param imageConfig
     */
    public final void setImageConfig(XmlImageConfig imageConfig) {
        this.imageConfig = imageConfig;
        imageConfig.setParentRNode(this);
    }

    /**
     * Gets the IRNode property <b>parentRNode</b>.
     *
     * @return IRNode
     */
    public final IRNode getParentRNode() {
        return (parentRNode);
    }

    /**
     * Sets the IRNode property <b>parentRNode</b>.
     *
     * @param parentRNode
     */
    public final void setParentRNode(IRNode parentRNode) {
        this.parentRNode = parentRNode;
    }

    /**
     * Gets child RNodes.
     *
     * @return IRNode[]
     */
    public IRNode[] getRNodes() {
        java.util.List classNodes = new java.util.ArrayList();
        classNodes.addAll(catalogPath);
        if (imageConfig != null) {
            classNodes.add(imageConfig);
        }
        IRNode[] nodes = new IRNode[classNodes.size()];
        return ((IRNode[])classNodes.toArray(nodes));
    }

    /**
     * Gets the RContext property <b>rContext</b>.
     *
     * @return RContext
     */
    public final RContext getRContext() {
        return (rContext);
    }

    /**
     * Sets the RContext property <b>rContext</b>.
     *
     * @param rContext
     */
    public final void setRContext(RContext rContext) {
        this.rContext = rContext;
        IRNode[] contextRNodes = getRNodes();
        for (int i = 0;i < contextRNodes.length;i++) {
            contextRNodes[i].setRContext(rContext);
        }
    }

    /**
     * Gets the property "rContext" which is resolved recursively.
     *
     * @return RContext
     */
    public RContext getRContextResolved() {
        if (rContext != null) {
            return (rContext);
        }
        if (parentRNode == null) {
            return (null);
        }
        return (parentRNode.getRContextResolved());
    }

    /**
     * Tests if a Element <code>element</code> is valid
     * for the <code>XmlConfiguration</code>.
     *
     * @param element
     * @return boolean
     */
    public static boolean isMatch(Element element) {
        String tagName = element.getTagName();
        if (!"configuration".equals(tagName)) {
            return (false);
        }
        RStack target = new RStack(element);
        Element child;
        while (!target.isEmptyElement()) {
            if (!XmlCatalogPath.isMatchHungry(target)) {
                break;
            }
        }
        if (XmlImageConfig.isMatchHungry(target)) {
        }
        if (!target.isEmptyElement()) {
            return (false);
        }
        return (true);
    }

    /**
     * Tests if elements contained in a Stack <code>stack</code>
     * is valid for the <code>XmlConfiguration</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return boolean
     */
    public static boolean isMatch(RStack stack) {
        Element element = stack.peekElement();
        if (element == null) {
            return (false);
        }
        return (isMatch(element));
    }

    /**
     * Tests if elements contained in a Stack <code>stack</code>
     * is valid for the <code>XmlConfiguration</code>.
     * This method consumes the stack contents during matching operation.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return boolean
     */
    public static boolean isMatchHungry(RStack stack) {
        Element element = stack.peekElement();
        if (element == null) {
            return (false);
        }
        if (isMatch(element)) {
            stack.popElement();
            return (true);
        } else {
            return (false);
        }
    }
}
